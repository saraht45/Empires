<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Mortalis:Ur:BuiltItem)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="true"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="react-post:sense/smell-dob">
             $(this.sys:web:scent)
          </Base:Description>
          <Base:Description type="react-post:sense/taste-dob">
             $(this.sys:web:taste)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="#list#">
         X[M] /* 
 
----------------------------------- 
 LIBRARY CONTENT (Merry/SAM) 
 
 Object:     Mortalis:Ur:BuiltDrink 
 Maintainer: Kalle Alm 
 Email:      kalle@mortalis.skotos.net 
 Rev:        1.1 
 Generated:  Sun Dec  2 02:03:32 2007 
 Last rev.:  Thu Jun 22 19:48:37 2006 by zwoc (EED) 
 
 
 
(Do not modify #list#. Automatically constructed property.) 
 
 
----------------------------------------- 
 lib:load         (M) Load food data. 
 lib:store        (M) Store drink data. 
 react:drink-what (M) Drink it. 
----------------------------------------- 
 
*/
      </Core:Property>
      <Core:Property property="export:potable:noslay">
         1
      </Core:Property>
      <Core:Property property="export:sam:field">
         X[S] \<tr\>\<td\>
    \<span class="contents"\>Taste:\</span\>
\</td\>\<td\>
    \<input name="newtaste" class="tfield" size="70" value="\$(taste)"/\>
\</td\>\</tr\>
\<tr\>\<td\>
    \<span class="contents"\>Scent:\</span\>
\</td\>\<td\>
    \<input name="newscent" class="tfield" size="70" value="\$(scent)"/\>
\</td\>\</tr\>
\<tr\>\<td\>
    \<span class="contents"\>Sips (this overrides the size):\</span\>
\</td\>\<td\>
    \<select name="newsips"\>
        \$[int i, cd;  
          string result;  
          result = "";  
          cd     = Int(\$sips);  
          for (i = 1; i \< 5; i++) \{  
              result += "\<option value='" + i + "' " + (i == cd ? "selected='1' " : "") + "\>" + i + "\</option\>";  
          \}  
          return result;]
    \</select\>
\</td\>\</tr\>
      </Core:Property>
      <Core:Property property="gimli:lib:load">
         "E[G]\\n/*\\n * D=Load food data.\\n */\\n\\n// Grab vals.\\n\$taste = \$itemob.\\"sys:web:taste\\";\\n\$scent = \$itemob.\\"sys:web:scent\\";\\n\$sips  = \$itemob.\\"sys:web:sips\\";\\n\\n// Sanitize vals.\\nif (!\$sips) \$sips = 4;\\n\\n// Set extra pars.\\n\$(ignore-size) = 1;\\n\$(ignore-density) = 1;\\n"
      </Core:Property>
      <Core:Property property="gimli:lib:store">
         "E[G]\\n/*\\n * D=Store drink data.\\n */\\n\\n// Grab vals from input.\\n\$taste = \$newtaste;\\n\$scent = \$newscent;\\n\$sips  = Int(\$newsips);\\n\\n// Store vals.\\n\$itemob.\\"export:sys:web:taste\\"  = \$taste;\\n\$itemob.\\"export:sys:web:scent\\"  = \$scent;\\n\$itemob.\\"export:sys:web:sips\\"   = \$sips;\\n\$itemob.\\"base:intrinsicdensity\\" = 1.0;\\n\$itemob.\\"base:intrinsicmass\\"    = 0.015 * (float)\$sips;\\n\\n\$itemob.\\"merry:inherit:lib:find_operator\\" = nil;\\n\$itemob.\\"base:parts-covered\\" = (\{ \});\\n"
      </Core:Property>
      <Core:Property property="gimli:react:drink-what">
         "E[G]\\n/*\\n * D=Drink it.\\n */\\nobject ob;\\nfloat mass;\\n\\nob = NRefOb(\$what[0]);\\nmass = ob.\\"base:intrinsicmass\\";\\n\\n// Calculate mass.\\nif (mass \<= 0.015) \{\\n    /* last sip */\\n    \$(food:massratio) = 0.0;\\n    echo (\\"You finish drinking \\" + Describe(this, nil, \$actor) + \\".\\",\\n          Describe(\$actor) + \\" finishes drinking \\" + Describe(this, \$actor) + \\".\\");\\n\} else \{\\n    /* modify multiplier by ratio (mass - 0.015) / mass */\\n    \$(food:massratio) = 1.0 - (0.015 / mass);\\n    \$delay(0, TRUE);\\n\}\\n\\n// Describe.\\necho (Str(this.\\"sys:web:taste\\"));\\n\\n// Subtract/slay.\\nif (\$(food:massratio) \> 0.0) \{\\n    NRefOb(\$what[0]).\\"base:intrinsicmass:local\\" *= \$(food:massratio);\\n\} else if (NRefOb(\$what[0])) \{\\n    Slay(NRefOb(\$what[0]));\\n\}\\n"
      </Core:Property>
      <Core:Property property="merry:lib:load">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:lib:load instead! */ 
/* 
 * D=Load food data. 
 */ 
 
/* Grab vals. */ 
\$taste = \$itemob."sys:web:taste"; 
\$scent = \$itemob."sys:web:scent"; 
\$sips  = \$itemob."sys:web:sips"; 
 
/* Sanitize vals. */ 
if (!\$sips) \$sips = 4; 
 
/* Set extra pars. */ 
\$(ignore-size) = 1; 
\$(ignore-density) = 1;
      </Core:Property>
      <Core:Property property="merry:lib:store">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:lib:store instead! */ 
/* 
 * D=Store drink data. 
 */ 
 
/* Grab vals from input. */ 
\$taste = \$newtaste; 
\$scent = \$newscent; 
\$sips  = Int(\$newsips); 
 
/* Store vals. */ 
\$itemob."export:sys:web:taste" = \$taste; 
\$itemob."export:sys:web:scent" = \$scent; 
\$itemob."export:sys:web:sips" = \$sips; 
\$itemob."base:intrinsicdensity" = 1.0; 
\$itemob."base:intrinsicmass" = 0.015 * (float)\$sips; 
 
\$itemob."merry:inherit:lib:find_operator" = nil; 
\$itemob."base:parts-covered" = (\{ \});
      </Core:Property>
      <Core:Property property="merry:react:drink-what">
         X[M] /* Gimli-Powered! Do not edit! Edit gimli:react:drink-what instead! */ 
/* 
 * D=Drink it. 
 */ 
object ob; 
float mass; 
 
ob = NRefOb(\$what[0]); 
mass = ob."base:intrinsicmass"; 
 
/* Calculate mass. */ 
if (mass \<= 0.015) \{ 
    /* last sip */ 
    \$(food:massratio) = 0.0; 
    EmitTo(\$actor, "You finish drinking " + Describe(this, nil, \$actor) + "."); 
    EmitIn(\$actor."base:environment",  
          Describe(\$actor) + " finishes drinking " + Describe(this, \$actor) + ".", \$actor); 
\} else \{ 
    /* modify multiplier by ratio (mass - 0.015) / mass */ 
    \$(food:massratio) = 1.0 - (0.015 / mass); 
    \$delay(0, TRUE, "5d80"); 
\} 
 
/* Describe. */ 
EmitTo(\$actor, Str(this."sys:web:taste")); 
 
/* Subtract/slay. */ 
if (\$(food:massratio) \> 0.0) \{ 
    NRefOb(\$what[0])."base:intrinsicmass:local" *= \$(food:massratio); 
\} else if (NRefOb(\$what[0])) \{ 
    Slay(NRefOb(\$what[0])); 
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1147822074, "zwoc", "E", 1149906350, "zwoc", "E", 1150615503, "zwoc", "E", 1150615523, "zwoc", "E", 1150617006, "zwoc", "EED", 1150617037, "zwoc", "P", 1150617069, "zwoc", "P", 1150617098, "zwoc", "P", 1150617353, "zwoc", "EED", 1150617527, "zwoc", "EED", 1150617560, "zwoc", "EED", 1150617641, "zwoc", "E", 1150618847, "zwoc", "EED", 1150621903, "zwoc", "EED", 1150623552, "zwoc", "E", 1151009620, "zwoc", "E", 1151009633, "zwoc", "X", 1151010667, "zwoc", "EED", 1151011395, "zwoc", "EED", 1151011683, "zwoc", "EED", 1151013781, "zwoc", "EED", 1151013855, "zwoc", "EED", 1151013872, "zwoc", "EED", 1151013892, "zwoc", "EED", 1151013910, "zwoc", "EED", 1151015024, "zwoc", "EED", 1151017180, "zwoc", "EED", 1151017366, "zwoc", "EED", 1151017389, "zwoc", "EED", 1151017520, "zwoc", "EED", 1151017590, "zwoc", "EED", 1151017598, "zwoc", "EED", 1151017627, "zwoc", "EED", 1151017800, "zwoc", "E", 1151017810, "zwoc", "E", 1151017841, "zwoc", "E", 1151017954, "zwoc", "E", 1151018042, "zwoc", "EED", 1151018045, "zwoc", "EED", 1151018080, "zwoc", "E", 1151018104, "zwoc", "X", 1151018234, "zwoc", "E", 1151018442, "zwoc", "EED", 1151018460, "zwoc", "EED", 1151019630, "zwoc", "EED", 1151019659, "zwoc", "EED", 1151019849, "zwoc", "EED", 1151019896, "zwoc", "EED", 1151019919, "zwoc", "EED", 1151019951, "zwoc", "EED", 1151019973, "zwoc", "EED", 1151019991, "zwoc", "EED", 1151020086, "zwoc", "EED", 1151020117, "zwoc", "EED", 1196656110, "tonyd", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
      <Core:Property property="x_gimliinstance">
         ([  ])
      </Core:Property>
      <Core:Property property="{author}">"Kalle Alm"</Core:Property>
      <Core:Property property="{email}">
         "kalle@mortalis.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1151020117
      </Core:Property>
      <Core:Property property="{sub_rev}">1</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
