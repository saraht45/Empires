<object clone="/obj/properties" owner="SkotOS">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="db:adverbs">
         ([ "abandonedly":"mood", "abasedly":"mood", "abashedly":"mood", "abatedly":"", "abatingly":"", "abbreviatedly":"", "aberrantly":"mood", "abeyantly":"mood", "abhorrently":"mood", "abidingly":"mood", "abjectly":"mood", "abnormally":"mood", "abominably":"mood", "abortedly":"", "abrasively":"", "abruptly":"", "absently":"mood", "absentmindedly":"mood", "absolutely":"", "absorbedly":"mood", "absorbingly":"mood", "abstainedly":"mood", "again":"repeat:1,noadv", "almost":"nopose", "always":"extend:-1", "angrily":"mood", "apart":"", "aside":"", "away":"", "back":"noadv", "both":"", "briefly":"", "carefully":"mood", "continuously":"extend:-1", "endlessly":"extend:-1", "forever":"extend:-1", "happily":"mood", "hurriedly":"mood", "idly":"mood", "lethargically":"extend:5", "more ":"noadv", "nearly":"nopose", "once":"repeat:1,noadv", "pretendingly":"nopose", "quickly":"", "repeatedly":"repeat", "repeatingly":"repeat", "resumingly":"noadv", "shakily":"mood", "slowly":"extend:2", "steadfastly":"mood", "thrice":"repeat:3", "twice":"repeat:2" ])
      </Core:Property>
      <Core:Property property="db:backup:adverbs">
         ([ "abandonedly":"mood", "abasedly":"mood", "abashedly":"mood", "abatedly":"none", "abatingly":"none", "abbreviatedly":"nopose", "aberrantly":"mood", "abeyantly":"mood", "abhorrently":"mood", "abidingly":"mood", "abjectly":"mood", "abnormally":"mood", "abominably":"mood", "abortedly":"none", "abrasively":"none", "abruptly":"none", "absently":"mood", "absentmindedly":"mood", "absolutely":"none", "absorbedly":"mood", "absorbingly":"mood", "abstainedly":"mood", "again":"noadv", "almost":"nopose", "always":"extend", "back":"noadv", "briefly":"pause", "continuously":"extend", "forever":"extend", "happily":"mood", "idly":"mood", "lethargically":"extend:5", "nearly":"nopose", "pretendingly":"nopose", "repeatedly":"repeat", "repeatingly":"repeat", "resumingly":"noadv", "shakily":"mood", "slowly":"extend", "steadfastly":"mood", "thrice":"repeat:3", "twice":"repeat:2" ])
      </Core:Property>
      <Core:Property property="db:verbs">
         ([ "beam":([ "active":1, "time":0, "types":(\{ "eyes" \}) ]), "bow":([ "active":0, "time":0, "types":(\{ "body" \}) ]), "chew":([ "active":1, "time":10, "types":(\{ "mouth" \}) ]), "dance":([ "active":1, "time":-1, "types":(\{ "body" \}) ]), "devour":([ "active":1, "time":15, "types":(\{ "mouth" \}) ]), "drink":([ "active":1, "time":0, "types":(\{ "mouth" \}) ]), "eat":([ "active":1, "time":0, "types":(\{ "mouth" \}) ]), "examine":([ "active":1, "time":15, "types":(\{ "eyes" \}) ]), "gaze":([ "active":0, "time":-1, "types":(\{ "eyes" \}) ]), "glance":([ "active":0, "time":0, "types":(\{ "eyes" \}) ]), "grab":([ "active":0, "time":-1, "types":(\{ "hands" \}) ]), "grasp":([ "active":0, "time":-1, "types":(\{ "hands" \}) ]), "grin":([ "active":0, "time":0, "types":(\{ "mouth" \}) ]), "gulp":([ "active":1, "time":0, "types":(\{ "mouth" \}) ]), "hover":([ "active":1, "time":-1, "types":(\{ "body" \}) ]), "howl":([ "active":1, "time":0, "types":(\{ "mouth" \}) ]), "knock":([ "active":1, "time":0, "types":(\{ "hands" \}) ]), "languish":([ "active":0, "time":60, "types":(\{ "body" \}) ]), "lean":([ "active":0, "time":-1, "types":(\{ "body" \}) ]), "look":([ "active":0, "time":0, "types":(\{ "eyes" \}) ]), "munch":([ "active":1, "time":5, "types":(\{ "mouth" \}) ]), "nibble":([ "active":1, "time":0, "types":(\{ "mouth" \}) ]), "pause":([ "active":0, "time":0, "types":(\{ "pause" \}) ]), "peer":([ "active":0, "time":-1, "types":(\{ "eyes" \}) ]), "point":([ "active":0, "time":0, "types":(\{ "hand" \}) ]), "poke":([ "active":1, "time":0, "types":(\{ "hand" \}) ]), "polish":([ "active":1, "time":-1, "types":(\{ "hands" \}) ]), "pose":([ "active":0, "time":-1, "types":(\{ "body" \}) ]), "push":([ "active":1, "time":0, "types":(\{ "body", "hands" \}) ]), "read":([ "active":1, "time":-1, "types":(\{ "eyes" \}) ]), "sigh":([ "active":1, "time":-1, "types":(\{ "mouth" \}) ]), "sip":([ "active":1, "time":0, "types":(\{ "mouth" \}) ]), "smile":([ "active":0, "time":15, "types":(\{ "mouth" \}) ]), "sneer":([ "active":0, "time":-1, "types":(\{ "eyes" \}) ]), "soar":([ "active":1, "time":-1, "types":(\{ "body" \}) ]), "stare":([ "active":0, "time":-1, "types":(\{ "eyes" \}) ]), "stop":([ "active":0, "time":0, "types":(\{ "pause" \}) ]), "study":([ "active":1, "time":-1, "types":(\{ "eyes" \}) ]), "swallow":([ "active":1, "time":0, "types":(\{ "mouth" \}) ]), "wave":([ "active":1, "time":0, "types":(\{ "hand" \}) ]) ])
      </Core:Property>
      <Core:Property property="html:adverbpopup">
         X[S] \<html\>
 \<head\>\<title\>Adverb data for poses.\</title\>\</head\>
 \<body background="http://www.skotos.net/games/marrach/artwork/skoot_back.jpg"\>
  This form displays adverb information that is used by the posing system.  Here's what all the checkmarks mean:
  \<table border="1"\>
  \<tr\>\<td\>Mood\</td\>\<td\>The adverb shows the mood that the action is done with, AND/OR what state the actor is in. Examples: \<em\>happily, shakily, steadfastly, hurriedly, carefully\</em\>. Most adverbs are 'mood' adverbs, and any adverb not listed here is assumed to be a mood adverb.\</td\>\</tr\>
  \<tr\>\<td\>Brief\</td\>\<td\>The action happens more quickly than normal.  Examples: \<em\>briefly, quickly, hurriedly\</em\>\</td\>\</tr\>
  \<tr\>\<td\>Extend\</td\>\<td\>The action takes longer than normal, whether it's done more slowly than usual, or done in a continous manner.  Examples:  \<em\>slowly, carefully, continuously, endlessly\</em\>.  The textbox is an optional multiplier; if a '2' is entered, then the adverb is considered to make actions take twice as long.  A value of -1 means that the action is performed endlessly until interrupted.\</td\>\</tr\>
  \<tr\>\<td\>Repeat\</td\>\<td\>The action is done a certain number of times.  The text box is for the number of times it is done; a -1 means the action is repeated over and over until interrupted.  Examples: \<em\>once, twice, thrice, repeatedly\</em\>\</td\>\</tr\>
  \<tr\>\<td\>NoAdv\</td\>\<td\>The adverb should not appear in pose information.  This should be set on any adverb where, if a person were to arrive in the area right at the start of a person doing the action, the adverb wouldn't make sense.  Examples: \<em\>back, again, resumingly, more\</em\>\</td\>\</tr\>
  \<tr\>\<td\>NoPose\</td\>\<td\>Actions with NoPose adverbs should not be posed at all - maybe because they don't 'really' happen.  Examples: \<em\>almost, nearly\</em\>\</td\>\</tr\>
  \</table\>
  \<zform\>
   \<table border="1" cellpadding="0" cellspacing="0"\>
    \<tr\>\<td\>Adverb\</td\>\<td\>Mood\</td\>\<td\>Brief\</td\>\<td\>Extend\</td\>\<td\>Repeat\</td\>\<td\>NoAdv\</td\>\<td\>NoPose\</td\>\</tr\>
\$[::adverbtable()]
   \</table\>
   \<input name="actor" type="hidden" value="\$[Str(\$actor)]"/\>
   \<input type="submit" name="submit" value="Submit Changes"/\>
   \<action\>
      \$[::adverbset()]
   \</action\>
  \</zform\>
 \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:donepopup">
         X[S] \<html\>
 \<head\>\<title\>Pose data updated\</title\>\</head\>
 \<body background="http://www.skotos.net/games/marrach/artwork/skoot_back.jpg"\>
  The \{? \| \$(verbset) \| verb\} \{? \| \$(adverbset) \| adverb\} data has been updated.
  \<zform\>
   \<input name="actor" type="hidden" value="\$[Str(\$actor)]"/\>
   \<input type="submit" name="submit" value="Edit Adverbs"/\>
   \<input type="submit" name="submit" value="Edit Actions"/\>
   \<action\>
    \$[\$actor=Obj(\$actor); 
      if(\$submit == "Edit Adverbs") 
      \{ 
       Popup(\$actor, this, "adverbpopup", \$actor: \$actor); 
       EmitTo(\$actor, "Opening Adverb Popup"); 
      \} 
      else 
      \{ 
       EmitTo(\$actor, "Action editing is not yet availible."); 
      \}]
   \</action\>
  \</zform\>
 \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="log:adverbpopups"/>
      <Core:Property property="merry:act-post:command%pose">
         X[M] Call(\$\{orcsuit:Lib:poses\}, "command", \$repair: 1 ); return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:examine%pose">
         X[M] EmitTo(\$actor, Call(\$\{orcsuit:Lib:poses\}, "describe-look", \$objectval: \$what, \$looker: \$actor)); return TRUE;
      </Core:Property>
      <Core:Property property="merry:act-post:look%pose">
         X[M] EmitTo(\$actor, Call(\$\{orcsuit:Lib:poses\}, "describe-look", \$objectval: \$what, \$looker: \$actor)); return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:adverbpopup">
         X[M] Popup(\$actor, this, "adverbpopup", \$actor: \$actor, \$isupdated: nil); 
EmitTo(\$actor, "Popping up popup.");
      </Core:Property>
      <Core:Property property="merry:lib:adverbset">
         X[M] int i, n, val; string si, code; mapping advmap; 
\$actor = Obj(\$actor); 
if(!\$actor) 
 error("Missing \$actor when updating adverb data."); 
advmap = ([ ]); 
 
/*EmitTo(\$actor, "Foo"); 
::argcheck();*/ 
 
i=0; 
si="0"; 
 
while(args["adverb"+si]) 
\{ 
 if(strlen(args["adverb"+si])) 
 \{ 
  code=""; 
  if(args["mood"+si]) 
   code+="mood,"; 
  if(args["short"+si]) 
   code+="short,"; 
  if(args["extend"+si]) 
  \{ 
   val=Int(args["extendval"+si]); 
   if(val) 
    code+="extend:"+Str(val)+","; 
   else 
    code+="extend,"; 
  \} 
  if(args["repeat"+si]) 
  \{ 
   val=Int(args["repeatval"+si]); 
   if(val) 
    code+="repeat:"+Str(val)+","; 
   else 
    code+="repeat,"; 
  \} 
  if(args["noadv"+si]) 
   code+="noadv,"; 
  if(args["nopose"+si]) 
   code+="nopose,"; 
  n=strlen(code)-2; 
  if(n\>=0)          /*Remove trailing commas*/ 
   code=code[0..n]; 
  advmap[args["adverb"+si]] = code; 
 \} 
 i++; 
 si=Str(i); 
\} 
/*EmitTo(\$actor, "foo"); 
EmitTo(\$actor, dump_value(advmap));*/ 
this."log:adverbpopups" = Arr(this."log:adverbpopups") + (\{ time() \}) + (\{ \$actor."udat:name" \}); 
this."db:adverbs" = advmap; 
 
Popup(\$actor, this, "donepopup", \$actor: \$actor, \$adverbset: 1); 
EmitTo(\$actor, "Updating adverb data.");
      </Core:Property>
      <Core:Property property="merry:lib:adverbtable">
         X[M] int i, n; 
string *adverbs, advtable, val; 
mapping advmap; 
 
advtable = ""; 
advmap = this."db:adverbs"; 
adverbs = map_indices(advmap); 
n=sizeof(adverbs); 
for(i=0;i\<n;i++) 
\{ 
 \$mood=nil; 
 \$brief=nil; 
 \$extend=nil; 
 \$extendval=nil; 
 \$repeat=nil; 
 \$repeatval=nil; 
 \$noadv=nil; 
 \$nopose=nil; 
  
 val=advmap[adverbs[i]]; 
 \$adverb = adverbs[i]; 
 if(contains(val,"mood")) 
  \$mood="checked"; 
 if(contains(val,"brief") \|\| contains(val,"pause")) 
  \$brief="checked"; 
 if(contains(val,"extend")) 
 \{ 
  \$extend="checked"; 
  sscanf(val, "%*sextend:%f", \$extendval); 
  \$extendval=Str(\$extendval); 
 \} 
 if(contains(val,"repeat")) 
 \{ 
  \$repeat="checked"; 
  sscanf(val, "%*srepeat:%d", \$repeatval); 
  \$repeatval=Str(\$repeatval); 
 \} 
 if(contains(val,"noadv")) 
  \$noadv="checked"; 
 if(contains(val,"nopose")) 
  \$nopose="checked"; 
 \$si=Str(i); 
 advtable += UnSAM(this."sam:adverbtable"); 
\} 
/*Add blanks*/ 
\$adverb=nil; 
\$mood=nil; 
\$brief=nil; 
\$extend=nil; 
\$extendval=nil; 
\$repeat=nil; 
\$repeatval=nil; 
\$noadv=nil; 
\$nopose=nil; 
n=i+10; 
for(i=i;i\<n;i++) 
\{ 
 \$si=Str(i); 
 advtable += UnSAM(this."sam:adverbtable"); 
\} 
return advtable;
      </Core:Property>
      <Core:Property property="merry:lib:argcheck">
         X[M] EmitTo(nil /* defunct */, "Argcheck:\\n"+dump_value(args)+"\\nEnd Argcheck");
      </Core:Property>
      <Core:Property property="merry:lib:command">
         X[M] mapping dbverb;  /*The info about the verb-pose used (duration, types, etc)*/ 
mapping *poses;  /*The pose information on the actor.*/ 
mapping pose;    /*The pose that was just done*/ 
string dbadverb; /*The type of the adverb used (mood, pause, brief, etc)*/ 
string tempstr;  /*string assembly*/ 
int posecount;   /*How many poses there are in *poses*/ 
int i, j, k;     /*iteration*/ 
int killpose;    /*Whether to delete the current pose*/ 
string *snames;  /*snames of the target of a role; used to determine what types 
                 **the pose is.*/ 
 
/*Check that everything's valid, and grab the values relevant to this operation*/ 
if (typeof(\$actor) != T_OBJECT) 
 error("pose-command: \$actor is not an object: " + dump_value(\$actor) ); 
 
if (\$repair) 
 poses = ::ispose(\$poses: \$actor."trait:pose", \$repair: \$repair); 
else 
\{ 
 tempstr = Call(\$\{orcsuit:Lib:poses\}, "ispose", \$poses: \$actor."trait:pose", \$repair: \$repair); 
 if (tempstr) 
  error("pose-command: bad 'trait:pose'in \$actor(" + dump_value(\$actor) + "): " + tempstr); 
 poses = \$actor."trait:pose"; 
\} 
 
posecount = sizeof(poses); 
 
dbverb = copy(this."db:verbs"[\$verb]); 
dbadverb = Str(this."db:adverbs"[\$adverb]); 
 
/*Unknown verbs count as active instantaneous poses*/ 
if (dbverb == nil) 
 dbverb = ([ "types":(\{"default"\}), "time":0, "active":1 ]); 
 
/*If it does no pose-related stuff, we're outta here*/ 
if (dbverb["types"][0] == "none" \|\| dbverb["types"][0] == nil \|\| contains(dbadverb, "nopose")) 
 return TRUE; 
 
if (dbverb["types"][0] == "pause") 
\{ 
 for (i=0; i \< posecount; i++) 
 \{ 
  if (poses[i]["active"]) 
  \{ 
   poses[i] = nil; 
   posecount = posecount --; 
   i=i--; 
  \} 
 \} 
\} 
else /*Remove obviated poses and maybe install the new one*/ 
\{ /* See about better defining what type(s) it is*/ 
 for (i=0; i \< sizeof(\$roles); i++) 
 \{ 
  if(args[\$roles[i] + ":preposition" ] == nil \|\| args[\$roles[i] + ":preposition"] == "what" \|\| args[\$roles[i] + ":preposition" ] == "with") 
  \{ 
   /*if it's a part of the actor, and if it's a hand or mouth or whatnot, add it that type, and delete default*/ 
   if ( NRefOb(args[\$roles[i]][0]) == \$actor) 
   \{ 
    tempstr = "details:" + NRefDetail(args[\$roles[i]][0]) + ":snames"; 
    snames = NRefOb(args[\$roles[i]][0]).tempstr; 
    if(typeof(snames) == 5) 
    \{ 
     for(j=0; j \< sizeof (snames); j++) 
     \{ 
      if ( sizeof(dbverb["types"] \& (\{"hand"\}) ) == 0) 
      \{ 
       if (contains(snames[j], "hand") \|\| contains(snames[j], "finger") \|\| contains(snames[j], "thumb") \|\| contains(snames[j], "wrist") \|\| contains(snames[j], "arm")) 
       \{ 
        dbverb["types"] += (\{ "hand" \}); 
       \}/*end if not yet hand*/ 
      \}/*end if hand*/ 
      if ( sizeof(dbverb["types"] \& (\{"eye"\}) ) == 0) 
      \{ 
       if (contains(snames[j], "eye")) 
       \{ 
        dbverb["types"] += (\{ "eye" \}); 
       \}/*if not yet eye*/ 
      \}/*end if eye*/ 
      if ( sizeof(dbverb["types"] \& (\{"mouth"\}) ) == 0) 
      \{ 
       if (contains(snames[j], "mouth") \|\| contains(snames[j], "lip") \|\| contains(snames[j], "tooth") \|\| contains(snames[j], "teeth") \|\| contains(snames[j], "tongue") \|\| contains(snames[j], "throat") \|\| "chin" \|\| contains(snames[j], "jaw")) 
       \{ 
        dbverb["types"] += (\{ "mouth" \}); 
       \}/*end if not yet mouth*/ 
      \}/*end if mouth*/ 
     \}/*end for snames*/ 
    \}/*end if snames is array*/ 
   \}/*end if target of role is a detail of actor*/ 
  \}/*end if preposistion of role is nil, 'what', or 'with'*/ 
 \}/*end for roles*/ 
 if (\$evoke) 
  dbverb["types"] \|= (\{ "mouth" \}); 
 dbverb -= (\{ "default" \}); 
 if (!sizeof(dbverb["types"])) 
  dbverb["types"] = (\{ "body" \}); 
 
  /*Remove any poses that overlap with the new one*/ 
 /*This section could use tweaking for optimization depending on how the types end up being allocated*/ 
 for (i=0; i \< posecount; i++) 
 \{ 
  killpose = 0; 
  for (j=0; j \< sizeof(poses[i]["types"]) \&\& killpose == 0; j++) 
  \{ 
   for (k=0; k \< sizeof(dbverb["types"]) \&\& killpose == 0; k++) 
   \{ 
    if (dbverb["types"][k] == poses[i]["types"][j]) /*if they have a same type*/ 
    \{ 
     killpose = 1; 
     continue; 
    \} 
   \} 
  \} 
  if (killpose) 
  \{ 
   poses -= (\{ poses[i] \}); 
   posecount--; 
   i--; 
  \} 
 \} 
 
 /*Determine if the pose should be added to the poselist, or is only temporary 
 **Then if it should be added, compile the variables and add it in.*/ 
 if (!\$privacy \&\& !\$secrecy \&\& ( dbverb["time"] \|\| dbadverb == "extend") \&\& !contains(dbadverb, "brief") \&\& !contains(dbadverb, "nopose") ) 
 \{ 
  pose = ([ "verb":\$verb ]); 
  pose["verb"] = \$verb; 
  if (contains(dbadverb, "noadv") == 0) 
  \{ 
   pose["adverb"] = \$adverb; 
  \} 
  pose["roles"] = \$roles; 
  pose["adverb:position"] = args["adverb:position"]; 
  pose["verb-extra:pe"] = args["verb-extra:pe"]; 
  pose["types"] = dbverb["types"]; 
  pose["active"] = dbverb["active"]; 
  for (i=0; i \< sizeof(\$roles); i++) 
  \{ 
   pose[\$roles[i]] = args[\$roles[i]]; 
   tempstr = \$roles[i] + ":preposition"; 
   pose[tempstr] = args[tempstr]; 
  \} 
  poses += (\{ pose \}); 
 \} 
\} 
\$actor."trait:pose" = poses;
      </Core:Property>
      <Core:Property property="merry:lib:describe-brief">
         X[M] /*  
** Returns pose of an object, as a string. 
**  Example:  "sitting primly in an oak chair" 
** 
** Arguments:  
**  
**  \$objectval   What's being looked at.  Can be an object or an array with 
**   element 0 being an object.  The object should have a valid "trait:pose"; an 
**   invalid one will result in the standard stance string. 
**  \$looker Who's looking.  An object. Optional. 
**  
**  Sample call: +tool merry eval Call(\$\{orcsuit:Lib:poses\}, "describe", \$looker: \$actor, \$objectval: \$actor) 
** 
** 030915 Orcsuit  
*/  
  
string pose; 
string tmpstr; 
int i, j, k, bodypose, posecount; 
mapping *poses; 
 
if (\$objectval == nil) 
\{ 
 error("pose-describe-brief: expecting \$objectval"); 
\} 
\$objectval = Call(\$\{orcsuit:Lib:poses\}, "getobject", \$objectval: \$objectval); 
if (\$objectval == nil) 
\{ 
  error("pose-describe-brief: \$objectval is not an object or a value resolvable to an object"); 
\} 
/*Make sure we're dealing with the default detail, as poses for individual details are not yet enabled*/ 
if (Get(\$objectval, "details:" + NRefDetail(\$objectval) + ":prime") == 0) 
\{ 
 return ""; 
\} 
 
\$objectval = NRefOb(\$objectval); 
pose = ""; 
poses = Call(\$\{orcsuit:Lib:poses\}, "ispose", \$poses: \$objectval."trait:pose", \$repair: 1); 
 
/*Get the stance, or what is to replace the stance.*/ 
if (typeof(poses) !=5 ) 
\{ 
 posecount = 0; 
\} 
else 
\{ 
 if (sizeof(poses) == 0) 
 \{ 
  posecount = 0; 
 \} 
 else 
 \{ 
  if (typeof(poses[0]) != 6 ) 
  \{ 
   posecount = 0; 
  \} 
  else 
  \{ 
   posecount = sizeof(poses); 
  \} 
 \} 
\} 
bodypose = -1; 
for( i=0; i \< posecount \&\& bodypose == -1; i++) 
\{ 
 for (j=0; j \< sizeof(poses[i]["types"]); j++) 
 \{ 
  if ( poses[i]["types"][j] == "body") 
  \{ 
   if (poses[i]["adverb"] \&\& poses[i]["adverb:position"] == "pv") 
   \{ 
    pose += poses[i]["adverb"] + " "; 
   \} 
   pose += Call(\$\{orcsuit:Lib:general\}, "gerund", \$gerund: poses[i]["verb"]); 
   if (typeof(poses[i]["roles"]) == 5) 
   \{ 
    for (k=0; k \< sizeof(poses[i]["roles"]); k++) 
    \{ 
     pose += " " + Str(poses[i][poses[i]["roles"][k] + ":preposition"]) + " " + Describe(poses[i][poses[i]["roles"][k]], \$objectval, \$looker); 
     \} 
    if (poses[i]["adverb"] \&\& poses[i]["adverb:position"] != "pv") 
    \{ 
     pose += " " + poses[i]["adverb"]; 
    \} 
   \} 
   bodypose = i; 
  \} 
 \}; 
\} 
/*if there is no body pose, use the stance, or send back nothing at all if the object's in the NIL.  Floor should go somewhere.*/ 
if (bodypose == -1) 
\{ 
 if (\$objectval."base:environment" == nil) 
 \{ 
  return ""; 
 \} 
 if (\$objectval."base:clothing:worn") 
 \{ /*if it's worn, "It is worn by person."*/ 
  pose += "worn by " + Describe(\$objectval."base:worn-by", \$objectval."base:worn-by", \$looker); 
 \} 
 else 
 \{ 
  if (\$objectval."base:environment"."base:environment" == \$looker."base:environment") 
  \{ /*If who/whatever is carrying it is in the same place as the looker,  
    **"It is held by person/thing.*/ 
   return ""; /*Just don't do anything to held items, for now*/ 
   pose += "held by " + Describe(\$objectval."base:environment", \$objectval."base:environment", \$looker); 
  \} 
  else 
  \{ 
   pose += \$objectval."base:stancestring"; 
  \} 
 \} 
\} 
/*Where are they doing this, if it's not already set?*/ 
k=1; /*if k is 1, then location is not already set*/ 
if(bodypose \>= 0 \&\& typeof(poses[bodypose]["roles"]) == 5) 
\{ 
 for(i=0; k \&\& i \< sizeof(poses[bodypose]["roles"]); i++) 
 \{ 
  for(j=0; k \&\& j \< sizeof(poses[bodypose][poses[bodypose]["roles"][i]]); j++) 
  \{ 
   if( dump_value(poses[bodypose][poses[bodypose]["roles"][i]][j]) == dump_value(\$objectval."base:proximity")) 
   \{/*No idea why it won't evaluate true if dump_value isn't included.  Maybe == doesn't like nrefs?*/ 
    k=0; 
   \} 
  \} 
 \} 
\} 
if(\$objectval."base:clothing:worn" == nil \&\& k ) 
\{ 
 if (\$objectval."base:proximity") 
 \{ 
  pose += " " + \$objectval."base:prepositionstring" + " " + Describe(\$objectval."base:proximity", \$objectval, \$looker); 
 \} 
  else 
 \{ 
  pose += " in " + Describe(\$objectval."base:environment", \$objectval, \$looker); 
 \} 
\} 
 
/*chain on the rest of the poses*/ 
for( i=0; i \< posecount; i++) 
\{ 
 if (i != bodypose) 
 \{ 
  if ( ( posecount \< 3) \|\| (i \< ( posecount - 1 ) ) ) 
  \{ 
   pose += ", "; 
  \} 
  else 
  \{ 
   pose += " and "; 
  \} 
  if (poses[i]["adverb"] \&\& poses[i]["adverb:position"] == "pv") 
  \{ 
   pose += poses[i]["adverb"] + " "; 
  \} 
  pose += Call(\$\{orcsuit:Lib:general\}, "gerund", \$gerund: poses[i]["verb"]); 
  if (typeof(poses[i]["roles"]) == 5) 
  \{ 
   for (k=0; k \< sizeof(poses[i]["roles"]); k++) 
   \{ 
    tmpstr = poses[i]["roles"][k] + ":preposition"; 
    tmpstr = Str(poses[i][tmpstr]); 
    pose += " " + tmpstr + " " + Describe(poses[i][poses[i]["roles"][k]], \$objectval, \$looker); 
   \} 
  \} 
  if (poses[i]["adverb"] \&\& poses[i]["adverb:position"] != "pv") 
  \{ 
   pose += " " + poses[i]["adverb"]; 
  \} 
 \} 
\}; 
return pose;
      </Core:Property>
      <Core:Property property="merry:lib:describe-look">
         X[M] /*          
** Returns the full pose of an object; primarily for appending to a 'look' 
**  description.  Returns an empty string if the arguments aren't perfect, of  
**  if the object is in nil. 
**  Example:  "She is sitting primly in an oak chair." 
**  
** 
** Arguments:          
**          
**  \$objectval What's being looked at.  Can be an object, a string containing an 
**           object name, or an array or mapping with a single element which 
**           one of those two. 
**  \$looker    Who's looking.  An object. Optional. 
**          
**  Sample call: +tool merry eval Call(\$\{orcsuit:Lib:poses\}, "describe", \$looker: \$actor, \$what: \$actor); 
**         
** 030915 Orcsuit          
*/          
 
string pose; 
string posebrief; 
pose = ""; 
/*note that getobject is currently incompatible with multiple obects. 
  **if multiple object funtionality is enabled in the future, this will 
  **need to be accounted for.*/ 
if (\$objectval = Call(\$\{orcsuit:Lib:poses\}, "getobject", \$objectval: \$objectval)) 
\{ /*Make sure we're dealing with the default detail, as poses for individual 
  **details are not yet enabled*/ 
 if (NRefDetail(\$objectval) != "default") 
 \{ 
  return pose; 
 \} 
 \$objectval = NRefOb(\$objectval); 
 if (\$objectval."base:environment") 
 \{ 
  if (\$objectval == \$looker) 
  \{ 
   pose = "You are "; 
  \} 
  else 
  \{ 
   pose = capitalize(\$objectval."base:pronoun") + " is "; 
  \} 
  posebrief = Call(\$\{orcsuit:Lib:poses\}, "describe-brief", \$objectval: \$objectval, \$looker: \$looker); 
  if (posebrief == "") 
  \{ 
   return posebrief; 
  \} 
  else 
  \{ 
  pose = capitalize(pose + posebrief + "."); 
  \} 
 \} 
\} 
return pose;
      </Core:Property>
      <Core:Property property="merry:lib:gerund">
         X[M] /* 
** Turns a verb string into its gerund form 
** Examples:  "eat" becomes "eating", "stare" becomes "staring" 
** 
** Arguments: 
**  \$gerund (string) - the verb to transform.  Is set to the gerund form by 
**   this function. 
** 
** Returns \$gerund after modifications. 
** 
** 030914 James Sanders 
*/ 
 
string tmpstr, tmpstr2; 
string *doubles; 
int i; 
 
if (typeof(\$gerund) != 3) 
\{ 
 Error("gerund: \$gerund is not a string"); 
\} 
/*drop any lone e at the end, but leave double-e's alone (like 'free').*/ 
sscanf(\$gerund + "\&", "%se\&", tmpstr); 
if(tmpstr) 
\{ 
 sscanf(\$gerund + "\&", "%see\&", tmpstr2); 
 if (tmpstr2 == nil) 
 \{ 
  \$gerund = tmpstr; 
 \} 
\} 
else 
\{ 
 doubles = (\{ "b", "d", "g", "m", "p", "r", "t", "z" \}); 
 for ( i = 0; i \< 8; i++ ) 
 \{ 
  sscanf(\$gerund + "\&", "%s" + doubles[i] + "\&", tmpstr); 
  if (tmpstr) 
  \{ 
   \$gerund = \$gerund + doubles[i]; 
   i=26; 
  \} 
 \} 
\} 
\$gerund = \$gerund + "ing"; 
return \$gerund;
      </Core:Property>
      <Core:Property property="merry:lib:getobject">
         X[M] /* 
** Takes a value \$objectval and does its best to convert \$objectval into an object. 
** Both modifies \$objectval, and returns the new \$objectval. 
**  
** Arguments: 
**  \$objectval - the value to convert to an object.  Is modified. 
**   
** In                   Out  
** nil                  nil 
** int                  nil - though maybe it should return /base/obj/thing#xxxxx 
** float                nil 
** string               The object with the woename of the string, or nil if there is no such object. 
** object               The same value. 
** array w/ 1 element   This function on that element. 
** other array          nil 
** mapping w/ 1 element This function on that element. 
** other mapping        nil 
** 
** Sample usage: 
** 
** if (Call(\$\{orcsuit:Lib:poses\}, "getobject", \$objectval: \$what)) 
** \{ 
**  \<mess with \$objectval, as it's now an object\> 
** \} 
** else 
** \{ 
**  \<do nothing with \$objectval, as it's nil\> 
** \} 
*/ 
 
if (typeof(\$objectval) \< 3) 
\{ 
 \$objectval = nil; 
\} 
if (typeof(\$objectval) == 3) 
\{ 
 \$objectval = Obj(\$objectval); 
\} 
if (typeof(\$objectval) == 5) 
\{ 
 if (sizeof(\$objectval) == 1) 
 \{ 
  \$objectval = \$objectval[0]; 
  \$objectval = Call(\$\{orcsuit:Lib:poses\}, "getobject", \$objectval: \$objectval); 
 \} 
 else 
 \{ 
 \$objectval = nil; 
 \} 
\} 
if (typeof(\$objectval) == 6) 
\{ 
 if (map_sizeof(\$objectval) == 1) 
 \{ 
  \$objectval = map_values(\$objectval)[0]; 
  \$objectval = Call(\$\{orcsuit:Lib:poses\}, "getobject", \$objectval: \$objectval); 
 \} 
 else 
 \{ 
 \$objectval = nil; 
 \} 
\} 
return \$objectval;
      </Core:Property>
      <Core:Property property="merry:lib:ispose">
         X[M] /* 
** Verifies if a pose or pose array is valid. 
** Useful to see if an object has valid pose information. 
** 
** Arguments: 
**  \$poses - Holds the supposed pose array.  Required unless \$pose is set. 
**  \$pose - Holds the supposed array.  Will be ignored if \$poses is set. 
**  \$repair - If set, this function erases invalid parts of the poses, resulting 
**    in a mapping (or array of mappings if \$poses is set) with as much data as 
**    can be validly interperted. 
** 
** Returns: 
**  If \$repair is set, this function returns a valid pose (or pose array if 
**    \$poses is set). 
**  If \$repair is not set, this function returns a string containing the first 
**    error encountered if the information is invalid, or nil if the information 
**    is valid. 
**  Note that if nil is sent, an empty mapping (or array of mappings) is 
**    returned, regardless if \$repair is set; also, any subset of a pose that is 
**    set to nil will be erased if such erasure does not invalidate the pose.  
** 
** Issues:  Checks overall property structure, and that ["types"] is good, and 
**   ["verb"\} exists, but does not check that the other possible values are of 
**   the correct type, or that the matchin properies for ["roles"] exists. 
** 030914  James Sanders 
*/ 
 
mixed *poses; 
int i, j; 
 
/*get our mapping array set up*/ 
if (\$poses) 
\{ 
 poses = \$poses; 
\} 
else 
\{  
 poses = (\{ \$pose \}); 
\} 
 
if (typeof(poses) !=5 ) 
\{ 
 if (\$repair) 
 \{ 
  poses = (\{ ([ ]) \}); 
 \} 
 else 
 \{ 
  return "not an array of mappings"; 
 \} 
\} 
 
poses -= (\{ ([ ]) \}); /*nils begone!*/ 
for (i=0; i \< sizeof(poses); i++) 
\{ 
 if (typeof(poses[i]) !=6 ) 
 \{ 
  if (\$repair) 
  \{ 
   poses -= (\{ poses[i] \}); 
   i--; 
  \} 
  else 
  \{ 
   if (sizeof(poses) == 1) 
   \{ 
    return "pose is not a mapping" + dump_value(poses); 
   \} 
   else 
   \{ 
    return "pose " + Str(i-1) + " of " + Str(sizeof(poses)) + " is not a mapping"; 
   \} 
  \} 
 \} 
 else 
 \{ 
  if(poses[i]["verb"] == nil) 
  \{ 
   if (\$repair) 
   \{ 
    poses -= (\{ poses[i] \}); 
    i--; 
   \} 
   else 
   \{ 
    return "pose " + Str(i-1) + " ['verb'] does not exist"; 
   \} 
  \} 
  else 
  \{ 
   if(typeof(poses[i]["verb"]) != 3) 
   \{ 
    if (\$repair) 
    \{ 
     poses[i]["verb"]=Str(poses[i]["verb"]); 
    \} 
    else 
    \{ 
     return "pose " + Str(i-1) + " ['verb'] is not a string"; 
    \} 
   \} 
   if(typeof(poses[i]["types"]) !=5) 
   \{ 
    if (\$repair) 
    \{ 
     poses[i]["types"] = (\{ \}); 
    \} 
    else 
    \{ 
     return "pose " + Str(i-1) + "'s ['types'] is not an array"; 
    \} 
   \} 
   else 
   \{ 
    for(j=0;j\<sizeof(poses[i]["types"]);j++) 
    \{ 
     if (typeof(poses[i]["types"][j]) \< 5) 
     \{ 
      poses[i]["types"][j] = Str(poses[i]["types"][j]); 
     \} 
     else 
     \{ 
      poses[i]["types"][j] -= (\{ poses[i]["types"][j] \}); 
     \} 
    \}/*end for loop of all types*/ 
   \}/*end if pose types is array then else*/ 
   if(typeof(poses[i]["roles"]) !=5) 
   \{ 
    if (\$repair) 
    \{ 
     poses[i]["roles"] = (\{ \}); 
    \} 
    else 
    \{ 
     return "pose " + Str(i-1) + "'s ['roles'] is not an array"; 
    \} 
   \} 
   else 
   \{ 
    for(j=0;j\<sizeof(poses[i]["roles"]);j++) 
    \{ 
     if (typeof(poses[i]["roles"][j]) \< 5) 
     \{ 
      poses[i]["roles"][j] = Str(poses[i]["roles"][j]); 
     \} 
     else 
     \{ 
      poses[i]["roles"][j] -= (\{ poses[i]["roles"][j] \}); 
     \} 
    \}/*end for loop of all roles*/ 
   \}/*end if pose roles is array then else*/ 
  \}/*end if pose verb exists*/ 
 \}/*end if pose is mapping then else*/ 
\}/*end for loop of all poses in array*/ 
if (\$repair) 
\{ 
 return poses; 
\} 
return nil;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1063273481, "orcsuit", "X", 1063281841, "orcsuit", "E", 1063282002, "orcsuit", "E", 1063282066, "orcsuit", "E", 1063282128, "orcsuit", "E", 1063282831, "orcsuit", "E", 1063282942, "orcsuit", "E", 1063283036, "orcsuit", "E", 1063283115, "orcsuit", "E", 1063283618, "orcsuit", "E", 1063283696, "orcsuit", "E", 1063283771, "orcsuit", "E", 1063283811, "orcsuit", "E", 1063283879, "orcsuit", "E", 1063283911, "orcsuit", "E", 1063283951, "orcsuit", "E", 1063284172, "orcsuit", "E", 1063284284, "orcsuit", "E", 1063287753, "orcsuit", "E", 1063287843, "orcsuit", "E", 1063287934, "orcsuit", "E", 1063288095, "orcsuit", "E", 1063292168, "orcsuit", "E", 1063292334, "orcsuit", "E", 1063292567, "orcsuit", "E", 1063292650, "orcsuit", "E", 1063292748, "orcsuit", "E", 1063293065, "orcsuit", "E", 1063293773, "orcsuit", "E", 1063296316, "orcsuit", "E", 1063296578, "orcsuit", "E", 1063296953, "orcsuit", "E", 1063297085, "orcsuit", "E", 1063297362, "orcsuit", "E", 1063297577, "orcsuit", "E", 1063297738, "orcsuit", "E", 1063297975, "orcsuit", "E", 1063345788, "orcsuit", "E", 1063346681, "orcsuit", "E", 1063346720, "orcsuit", "E", 1063346752, "orcsuit", "E", 1063346836, "orcsuit", "E", 1063346954, "orcsuit", "E", 1063346960, "orcsuit", "E", 1063346979, "orcsuit", "E", 1063346987, "orcsuit", "E", 1063347040, "orcsuit", "E", 1063347056, "orcsuit", "E", 1063347090, "orcsuit", "E", 1063347200, "orcsuit", "X", 1063347247, "orcsuit", "X", 1063347384, "orcsuit", "X", 1063347412, "orcsuit", "X", 1063347486, "orcsuit", "X", 1063347518, "orcsuit", "X", 1063348165, "orcsuit", "X", 1063351472, "orcsuit", "X", 1063352749, "orcsuit", "E", 1063356057, "orcsuit", "E", 1063358397, "orcsuit", "E", 1063358417, "orcsuit", "E", 1063358446, "orcsuit", "E", 1063358495, "orcsuit", "E", 1063358552, "orcsuit", "E", 1063358583, "orcsuit", "E", 1063358659, "orcsuit", "E", 1063358701, "orcsuit", "E", 1063358766, "orcsuit", "E", 1063360155, "orcsuit", "E", 1063361314, "orcsuit", "E", 1063365237, "orcsuit", "E", 1063365809, "orcsuit", "E", 1063365878, "orcsuit", "E", 1063366315, "orcsuit", "E", 1063370116, "orcsuit", "E", 1063372152, "orcsuit", "E", 1063372296, "orcsuit", "E", 1063372394, "orcsuit", "E", 1063372473, "orcsuit", "E", 1063372520, "orcsuit", "E", 1063372556, "orcsuit", "E", 1063372724, "orcsuit", "E", 1063373325, "orcsuit", "E", 1063373892, "orcsuit", "E", 1063375975, "orcsuit", "E", 1063384020, "orcsuit", "E", 1063388645, "orcsuit", "E", 1063388702, "orcsuit", "E", 1063388765, "orcsuit", "E", 1063389733, "orcsuit", "E", 1063390633, "orcsuit", "E", 1063472949, "orcsuit", "E", 1063483479, "orcsuit", "E", 1063585941, "orcsuit", "E", 1063586643, "orcsuit", "E", 1063586674, "orcsuit", "E", 1063586844, "orcsuit", "E", 1063586991, "orcsuit", "E", 1063591677, "orcsuit", "E", 1063592035, "orcsuit", "E", 1063592162, "orcsuit", "E", 1063592207, "orcsuit", "E", 1063592265, "orcsuit", "E", 1063592545, "orcsuit", "E", 1063593780, "orcsuit", "E", 1063601130, "orcsuit", "E", 1063603296, "orcsuit", "E", 1063617219, "orcsuit", "E", 1063617286, "orcsuit", "E", 1063622135, "orcsuit", "E", 1063667439, "orcsuit", "E", 1063668092, "orcsuit", "E", 1063668161, "orcsuit", "E", 1063668559, "orcsuit", "E", 1063668608, "orcsuit", "E", 1063668640, "orcsuit", "E", 1063670832, "orcsuit", "E", 1063670974, "orcsuit", "E", 1063671550, "orcsuit", "E", 1063726203, "orcsuit", "E", 1063731309, "orcsuit", "E", 1063731364, "orcsuit", "E", 1063733101, "orcsuit", "E", 1063736291, "orcsuit", "E", 1063736746, "orcsuit", "E", 1063737882, "orcsuit", "E", 1063738160, "orcsuit", "E", 1063757386, "orcsuit", "E", 1063784843, "orcsuit", "E", 1064626753, "orcsuit", "E", 1064627192, "orcsuit", "E", 1064627627, "orcsuit", "E", 1064813568, "orcsuit", "E", 1064814674, "orcsuit", "E", 1064815300, "orcsuit", "E", 1064816809, "orcsuit", "E", 1156285525, "orcsuit", "E", 1156286111, "orcsuit", "P", 1156286912, "orcsuit", "P", 1156287250, "orcsuit", "P", 1156288040, "orcsuit", "P", 1156288541, "orcsuit", "E", 1156288584, "orcsuit", "P", 1156288724, "orcsuit", "P", 1156288994, "orcsuit", "P", 1156289614, "orcsuit", "E", 1156430045, "orcsuit", "E", 1156430571, "orcsuit", "E", 1156431312, "orcsuit", "P", 1156431381, "orcsuit", "P", 1156431757, "orcsuit", "P", 1156431847, "orcsuit", "P", 1156432006, "orcsuit", "E", 1156432335, "orcsuit", "P", 1156432514, "orcsuit", "P", 1156432632, "orcsuit", "P", 1156432704, "orcsuit", "P", 1156432923, "orcsuit", "P", 1156433098, "orcsuit", "P", 1156433362, "orcsuit", "P", 1156433454, "orcsuit", "P", 1156433548, "orcsuit", "P", 1156434034, "orcsuit", "P", 1156434166, "orcsuit", "P", 1156434201, "orcsuit", "P", 1156434214, "orcsuit", "P", 1156434234, "orcsuit", "P", 1156434385, "orcsuit", "P", 1156434963, "orcsuit", "P", 1156435070, "orcsuit", "P", 1156435337, "orcsuit", "P", 1156435674, "orcsuit", "P", 1156436631, "orcsuit", "E", 1156436918, "orcsuit", "P", 1156437168, "orcsuit", "P", 1156437337, "orcsuit", "P", 1156437364, "orcsuit", "P", 1156437413, "orcsuit", "P", 1156437441, "orcsuit", "P", 1156437462, "orcsuit", "P", 1156437963, "orcsuit", "P", 1156438237, "orcsuit", "P", 1156438355, "orcsuit", "P", 1156438361, "orcsuit", "P", 1156438433, "orcsuit", "P", 1156438659, "orcsuit", "P", 1156438730, "orcsuit", "P", 1156438938, "orcsuit", "P", 1156439083, "orcsuit", "P", 1156439289, "orcsuit", "P", 1156439382, "orcsuit", "P", 1156439443, "orcsuit", "P", 1156439473, "orcsuit", "P", 1156439518, "orcsuit", "P", 1156440535, "orcsuit", "P", 1156440600, "orcsuit", "P", 1156441171, "orcsuit", "P", 1156441418, "orcsuit", "P", 1156441512, "orcsuit", "P", 1156441538, "orcsuit", "P", 1156441561, "orcsuit", "P", 1156441914, "orcsuit", "P", 1156441975, "orcsuit", "P", 1156441989, "orcsuit", "P", 1156442029, "orcsuit", "P", 1156442125, "orcsuit", "P", 1156442226, "orcsuit", "P", 1156442261, "orcsuit", "P", 1156442496, "orcsuit", "P", 1156442538, "orcsuit", "P", 1156442584, "orcsuit", "P", 1156442603, "orcsuit", "P", 1156442635, "orcsuit", "P", 1156442657, "orcsuit", "P", 1156442701, "orcsuit", "P", 1156442954, "orcsuit", "P", 1156443338, "orcsuit", "P", 1156443423, "orcsuit", "P", 1156443433, "orcsuit", "P", 1156443436, "orcsuit", "P", 1156443459, "orcsuit", "P", 1156443524, "orcsuit", "P", 1156443665, "orcsuit", "P", 1156443802, "orcsuit", "P", 1156443974, "orcsuit", "P", 1156443991, "orcsuit", "P", 1156444421, "orcsuit", "P", 1156444496, "orcsuit", "P", 1156444540, "orcsuit", "P", 1156445678, "orcsuit", "P", 1156445730, "orcsuit", "P", 1156446045, "orcsuit", "P", 1156446124, "orcsuit", "P", 1156446165, "orcsuit", "P", 1156446209, "orcsuit", "P", 1156446272, "orcsuit", "P", 1156446686, "orcsuit", "P", 1156447050, "orcsuit", "P", 1156447507, "orcsuit", "P", 1156447511, "orcsuit", "P", 1157581070, "orcsuit", "P", 1157581088, "orcsuit", "P", 1157581104, "orcsuit", "P", 1221895898, "orcsuit", "X" \})
      </Core:Property>
      <Core:Property property="sam:adverbtable">
         X[S] \<tr\>\<td\>\<input name="adverb\$(si)" type="text" size="20" value="\$(adverb)"/\>\</td\>
\<td\>\<input name="mood\$(si)" type="checkbox" checked="\$(mood)"/\>\</td\>
\<td\>\<input name="brief\$(si)" type="checkbox" checked="\$(brief)"/\>\</td\>
\<td\>\<input name="extend\$(si)" type="checkbox" checked="\$(extend)"/\>
    \<input name="extendval\$(si)" type="text" size="2" value="\$(extendval)"/\>\</td\>
\<td\>\<input name="repeat\$(si)" type="checkbox" checked="\$(repeat)"/\>
    \<input name="repeatval\$(si)" type="text" size="2" value="\$(repeatval)"/\>\</td\>
\<td\>\<input name="noadv\$(si)" type="checkbox" checked="\$(noadv)"/\>\</td\>
\<td\>\<input name="nopose\$(si)" type="checkbox" checked="\$(nopose)"/\>\</td\>\</tr\>
      </Core:Property>
      <Core:Property property="sam:verbtable">
         X[S] \<tr\>\<td\>\<input name="adverb\$(si)" type="text" size="20" value="\$(adverb)"/\>\</td\>
\<td\>\<input name="mood\$(si)" type="checkbox" checked="\$(mood)"/\>\</td\>
\<td\>\<input name="brief\$(si)" type="checkbox" checked="\$(brief)"/\>\</td\>
\<td\>\<input name="extend\$(si)" type="checkbox" checked="\$(extend)"/\>
    \<input name="extendval\$(si)" type="text" size="2" value="\$(extendval)"/\>\</td\>
\<td\>\<input name="repeat\$(si)" type="checkbox" checked="\$(repeat)"/\>
    \<input name="repeatval\$(si)" type="text" size="2" value="\$(repeatval)"/\>\</td\>
\<td\>\<input name="noadv\$(si)" type="checkbox" checked="\$(noadv)"/\>\</td\>
\<td\>\<input name="nopose\$(si)" type="checkbox" checked="\$(nopose)"/\>\</td\>\</tr\>
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
