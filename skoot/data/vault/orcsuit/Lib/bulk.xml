<object clone="/obj/properties" owner="SkotOS">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="log:creator">
         "Orcsuit"
      </Core:Property>
      <Core:Property property="merry:lib:bulkcommand">
         X[M] /*  
** D=Code for +bulk command.  
**  
** Arguments:  
**  \$actor - Who did the command, and gets the info.  
**  \$what - The objects to get info on, possibly in an array.  
**  
** Returns: 0  
*/  
  
object what;  
string emit1, emit2;  
int i,n;  
  
if(typeof(\$actor) != T_OBJECT)  
 error("bulk command - Expected \$actor is not an object");  
  
if(typeof(\$what) != T_ARRAY \|\| !sizeof(\$what))  
\{  
 EmitTo(\$actor, PRE("Syntax:\\n +bulk \<object(s)\> [using \<flags\>]\\n\\nFlags:\\n english - lbs instead of kg\\n example - give examples with similar values (in progress)\\n inv - also get info on object's inventory\\n bestunits - use g instead of kg, etc., when appropriate"));  
 return 0;  
\}  
  
if( \$(settings:words) )  
\{  
 if( member("english", \$(settings:words)) \|\| member("imperial", \$(settings:words)) )  
  \$english = 1;  
 if( member("example", \$(settings:words)) \|\| member("examples", \$(settings:words)) \|\|  
     member("sample", \$(settings:words)) \|\| member("samples", \$(settings:words))   )  
  \$example = 1;  
 if( member("i", \$(settings:words)) \|\| member("inv", \$(settings:words)) \|\|  
     member("inventory", \$(settings:words)) \|\| member("contents", \$(settings:words)) )  
  \$invtoo = 1;  
 if( member("best", \$(settings:words)) \|\| member("bestunits", \$(settings:words)) \|\|  
     member("goodunits", \$(settings:words)) \|\| member("unitsize", \$(settings:words)) )  
  \$bestunits = 1;  
\}  
  
emit1 = "Bulk information for "+Describe(\$what)+"\\n";  
  
n=sizeof(\$what);  
if(n == 1)  
\{  
 emit1 += dump_value(NRefOb(\$what[0]));  
 emit2 = ::bulkreport(\$what: \$what);  
 n=sizeof(\$what[0]."base:inventory");  
 if(n \&\& \$invtoo)  
  emit2+="\\n\\nBULK INFO ON INVENTORY: ("+Str(n)+" objects)\\n\\n"+ ::bulkreport(\$what: \$what[0]."base:inventory");  
\}  
else  
\{  
 emit1="";  
 if(n\<8)  
 \{  
  for(i=0;i\<n;i++)  
  \{  
   emit1+=dump_value(NRefOb(\$what[i]))+", ";  
  \}  
 \}  
 emit1+= "("+Str(n)+" objects)";  
 emit2+= ::bulkreport(\$what: \$what);  
\}  
  
EmitTo(\$actor, emit1);  
EmitTo(\$actor, PRE(emit2));  
return 0;
      </Core:Property>
      <Core:Property property="merry:lib:bulkreport">
         X[M] /*  
** D=Gets bulk info about a group object(s), and returns a report.  
**  
** Arguments:  
**  \$what - The objects to get info on, possibly in an array.  
**  
** Returns:  
**  A multi-line string report on the bulk information of the object(s).  
**  The report will differ slightly for single and multiple objects.  
*/  
  
string emit;  
object *what;  
int i, j, n, numwhat;  
float *vals, x, y;  
  
if(typeof(\$what) == T_OBJECT)  
 what = (\{ \$what \});  
else if (typeof(\$what) == T_ARRAY)  
 what = \$what;  
else  
 error("bulk report - Expected \$what is not object or object array");  
  
numwhat = sizeof(what);  
vals = allocate_float(15);  
  
for(i=0;i\<numwhat;i++)  
\{  
 what[i]=NRefOb(what[i]);  
  
 vals[0]+=Flt(what[i]."base:intrinsicmass"); /*Object by itself*/  
 n=sizeof(what[i]."base:inventory");  
 for(j=0;j\<n;j++)  
  vals[1]+=Flt(what[i]."base:inventory"[j]."base:actualmass");/*Object's inventory*/  
 vals[2]+=Flt(what[i]."base:actualmass"); /*Object+inventory*/  
 vals[3]+=Flt(what[i]."base:maxweight"); /*Object's max inventory*/  
 /*Object+max inventory is calculated after loop*/  
  
 vals[4]+=Flt(what[i]."base:minimumvolume"); /*Object by itself*/  
 n=sizeof(what[i]."base:inventory");  
 for(j=0;j\<n;j++)  
  vals[5]+=Flt(what[i]."base:inventory"[j]."base:actualvolume");/*Object's inventory*/  
 vals[6]+=Flt(what[i]."base:actualvolume"); /*Object+inventory+(empty space if not flexible)*/  
 vals[7]+=Flt(what[i]."base:intrinsiccapacity"); /*Object's max inventory*/  
 vals[8]+=Flt(what[i]."base:actualcapacity"); /*Object's inventory left*/  
  
 vals[9]+=Flt(what[i]."base:intrinsicdensity"); /*Object by itself*/  
 n=sizeof(what[i]."base:inventory");  
 for(j=0;j\<n;j++)  
  vals[10]+=Flt(what[i]."base:inventory"[j]."base:actualdensity");/*Object's inventory*/  
 vals[11]+=Flt(what[i]."base:actualdensity"); /*Object+inventory*/  
\}  
  
/*These numbers are ratios, so should be averaged*/  
vals[9] /= Flt(numwhat);  
vals[10] /= Flt(numwhat);  
vals[11] /= Flt(numwhat);  
  
emit ="MASS";  
emit+="\\n Intrinsic/base:  " + ::domass(\$val: vals[0]);  
emit+="\\n Of contents:     " + ::domass(\$val: vals[1]);  
emit+="\\n Actual/current:  " + ::domass(\$val: vals[2]);  
emit+="\\n Max can hold:    " + ::domass(\$val: vals[3]);  
if(vals[3]\>0.0 \&\& numwhat == 1)  
\{  
 emit+="\\n Space left now:  " + ::domass(\$val: (vals[3]-vals[1]));  
 emit+="\\n Max w/contents:  " + ::domass(\$val: (vals[0]+vals[3]));  
 emit+="\\n Percentage full: " + Str((vals[1]/vals[3])*100.0)+"%";  
\}  
  
emit+="\\n\\nVOLUME";  
emit+="\\n Minimum:         " + ::dovol(\$val: vals[4]);  
emit+="\\n  (Minimum volume is the object itself, excluding empty space and contents)";  
emit+="\\n Of contents:     " + ::dovol(\$val: vals[5]);  
emit+="\\n Actual/current:  " + ::dovol(\$val: vals[6]);  
emit+="\\n  (Actual volume is minimum+contents, plus empty space if not flexible)";  
emit+="\\n Max can hold:    " + ::dovol(\$val: vals[7]);  
if(vals[7]\>0.0 \&\& numwhat == 1)  
\{  
 emit+="\\n Space left now:  " + ::dovol(\$val: vals[8]);  
 /*emit+="\\n Max ob+contents: " + ::dovol(\$val:(vals[0]+vals[3])); Don't know how to get 'the biggest it'll ever be' without knowing flexibility*/  
 emit+="\\n Percentage full: " + Str((vals[5]/vals[7])*100.0)+"%";  
\}  
  
emit+="\\n\\nDENSITY";  
emit+="\\n Intrinsic:       " + ::doden(\$val: vals[9]);  
emit+="\\n Of contents:     " + ::doden(\$val: vals[10]);  
emit+="\\n Actual/current:  " + ::doden(\$val: vals[11]);  
  
return emit;
      </Core:Property>
      <Core:Property property="merry:lib:checkoutercontainers">
         X[M] /*
** D=Checks whether an object, when placed into a flexible container, will fit in that container's container.
**
** Arguments:
**
**   \$what - What object is being moved.
**   \$where - \$what's destination.
**
** Returns: 
**
**   If \$what fits:         The constant GENERIC_SUCCESS (0).
**   If \$what is too heavy: An array of the constant FAIL_MASS_CHECK (-2),
**                            and the container than cannot hold \$what.
**   If \$what is too large: An array of the constant FAIL_CAP_CHECK (-5),
**                            and the container than cannot hold \$what.
** 
** Note: Does not check the whether \$what can fit in \$where directly, just \$where's containers.
** This is for efficiency reasons.
*/

object from, container;
float mass, volume;

from      = \$what."base:environment";
mass      = \$what."base:actualmass";
volume    = \$what."base:actualvolume";
container = \$where;

/*It's already there, so why worry?*/
if (from == container)
    return GENERIC_SUCCESS;

while(container."base:flexible") \{
    container = container."base:environment";

    /* The reason for the 'from' test:
        If the item is already 'in' its destination, no further check needed.
        ...assuming that the item could fit into its old container already. */

    if (container == nil \|\| from == container)
        return GENERIC_SUCCESS;
    
    if (mass   \> container."base:maxweight" - container."base:actualmass")
        return (\{ FAIL_MASS_CHECK, container \});
    if (volume \> container."base:actualcapacity")
        return (\{ FAIL_CAP_CHECK,  container \});
\}

return GENERIC_SUCCESS;
      </Core:Property>
      <Core:Property property="merry:lib:doden">
         X[M] /*  
** D=Turns a density into a friendly string  
**  
** Arguments:  
** \$val - density value.  
** \$example - If set, include an example unit with similar mass.  
**  
** Returns: String mass description.  
*/  
  
string retval;  
float value;  
  
value = Flt(\$val);  
  
retval = Str(value);  
  
return retval;
      </Core:Property>
      <Core:Property property="merry:lib:domass">
         X[M] /*  
** D=Turns a mass into a friendly string  
**  
** Arguments:  
** \$val - Mass value, in kg.  
** \$english - If set, use English units (pounds) instead of SI units  
** \$bestunits - If set, use units appropriate to magnitude (g,kg)  
** \$example - If set, include an example unit with similar mass.  
**  
** Returns: String mass description.  
*/  
  
string retval;  
float value;  
  
value = Flt(\$val);  
  
if(\$english)  
\{  
 if(\$bestunits)  
 \{  
  if(value\<0.453592)  
   retval = Str(value / 0.028349523125) + " oz";  
  else if(value\>900.0)  
   retval = Str(value / 907.18474) + " short tons";  
  else  
   retval = Str(value / 0.45359237) + " lbs";  
 \}  
 else  
  retval = Str(value / 0.45359237) + " lbs";  
\}  
else  
\{  
 if(\$bestunits)  
 \{  
  if(value\<0.00001)  
   retval = Str(value * 1000000.0) + " mg";  
  else if(value\<0.01)  
   retval = Str(value * 1000.0) + " g";  
  else if(value\>5000.0)  
   retval = Str(value / 1000.0) + " metric tons";  
  else  
   retval = Str(value) + " kg";  
 \}  
 else  
  retval = Str(value) + " kg";  
\}  
  
/*  
if(\$example)  
\{  
\}*/  
  
return retval;
      </Core:Property>
      <Core:Property property="merry:lib:dovol">
         X[M] /*  
** D=Turns a volume into a friendly string  
**  
** Arguments:  
** \$val - Volume value, in m^3.  
** \$english - If set, use English units (gallons) instead of SI units  
** \$bestunits - If set, use units appropriate to magnitude (m^3,cm^3)  
** \$example - If set, include an example unit with similar mass.  
**  
** Returns: String mass description.  
*/  
  
string retval;  
float value;  
  
value = Flt(\$val);  
  
if(\$english)  
\{  
 if(\$bestunits)  
 \{  
  if(value\<0.000236587)  
   retval = Str(value / 0.0000295734) + " fl oz";  
  if(value\<0.0037854)  
   retval = Str(value / 0.000236587) + " cups";  
  else  
   retval = Str(value / 0.0037854) + " gal";  
 \}  
 else  
  retval = Str(value / 0.0037854) + " gal";  
\}  
else  
\{  
 if(\$bestunits)  
 \{  
  if(value\<0.0001)  
   retval = Str(value / 0.000001) + " cm^3";  
  else  
   retval = Str(value) + " m^3";  
 \}  
 else  
  retval = Str(value) + " m^3";  
\}  
  
/*if(\$example)  
\{  
  
\}*/  
  
return retval;
      </Core:Property>
      <Core:Property property="merry:lib:stringtomap">
         X[M] string *lines, prop;  
int i, n;  
mapping result;  
float val1, val2;  
mixed fin;  
  
lines = explode(bulk::.stringdensities, "\\r\\n");  
result = ([ ]);  
  
n=sizeof(lines);  
for(i=0;i\<n;i++)  
\{  
 EmitTo(\$actor, dump_value(lines[i]));  
 if(sscanf(lines[i], "%s\\t%f-%f", prop, val1, val2))  
  fin = (\{val1, val2\});  
 else  
 \{  
  sscanf(lines[i], "%s\\t%f", prop, val1);  
  fin =val1;  
 \}  
 prop = strip(prop);  
 result[prop] = fin;  
\}  
  
EmitTo(\$actor, dump_value(result));
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1079848626, "orcsuit", "X", 1092375364, "orcsuit", "E", 1092375384, "orcsuit", "E", 1092375469, "orcsuit", "E", 1092375501, "orcsuit", "E", 1092375524, "orcsuit", "E", 1092375564, "orcsuit", "E", 1092375670, "orcsuit", "E", 1092375879, "orcsuit", "E", 1092376074, "orcsuit", "E", 1092376203, "orcsuit", "E", 1092376258, "orcsuit", "E", 1092376451, "orcsuit", "E", 1092376514, "orcsuit", "E", 1092376559, "orcsuit", "E", 1092376639, "orcsuit", "E", 1092377226, "orcsuit", "E", 1092379172, "orcsuit", "E", 1092379511, "orcsuit", "E", 1092379634, "orcsuit", "E", 1092379721, "orcsuit", "E", 1092379784, "orcsuit", "E", 1092380230, "orcsuit", "E", 1092380282, "orcsuit", "E", 1092380319, "orcsuit", "E", 1092380492, "orcsuit", "E", 1092380526, "orcsuit", "E", 1092380624, "orcsuit", "E", 1092381088, "orcsuit", "E", 1092381427, "orcsuit", "E", 1092381449, "orcsuit", "E", 1092381695, "orcsuit", "E", 1092381829, "orcsuit", "E", 1092382520, "orcsuit", "E", 1092384970, "orcsuit", "E", 1092384986, "orcsuit", "E", 1092385086, "orcsuit", "E", 1092386667, "orcsuit", "E", 1092390601, "orcsuit", "E", 1092395000, "orcsuit", "E", 1092404281, "orcsuit", "E", 1092405120, "orcsuit", "E", 1092405189, "orcsuit", "E", 1092405245, "orcsuit", "E", 1092407072, "orcsuit", "E", 1092408895, "orcsuit", "E", 1092408995, "orcsuit", "E", 1092409512, "orcsuit", "E", 1092410727, "orcsuit", "E", 1093756361, "orcsuit", "X", 1219463006, "orcsuit", "X", 1219579108, "orcsuit", "E", 1219581708, "orcsuit", "E", 1219583617, "orcsuit", "E" \})
      </Core:Property>
      <Core:Property property="stringdensities">
         "Aluminum \\t 2.7\\r\\nBrass \\t8.64\\r\\nBronze \\t8.6\\r\\nCopper \\t8.7\\r\\nGold \\t19.3\\r\\nIron, Bar Stock \\t7.8\\r\\nIron, Cast \\t7.2\\r\\nLead \\t11\\r\\nSilver \\t10.5\\r\\nSteel \\t7.0 - 8.1\\r\\nTitanium \\t4.5\\r\\nMagnesium Alloys \\t1.8\\r\\nCotton \\t1.5\\r\\nFlax \\t1.6\\r\\nLeather, dry \\t0.95 - 1.2\\r\\nNylon \\t1.2\\r\\nPolyester, woven \\t1.5\\r\\nSilk \\t1.4\\r\\nWool \\t1.3\\r\\nABS \\t1.1\\r\\nBakelite \\t1.4\\r\\nBoron Carbide \\t2.5\\r\\nNeoprene \\t1.3\\r\\nNylon \\t1.7\\r\\nPolycarbonate \\t1.2 - 1.3\\r\\nPVC \\t1.4\\r\\nRubber \\t1.1 - 1.5\\r\\nVinyl, Rigid \\t1.3\\r\\nCommon Glass \\t2.2 - 2.6\\r\\nFlint Glass \\t3.6\\r\\nFused Silica \\t2.2\\r\\nPorcelain \\t2.4\\r\\nAir at 20 C \\t0.0013\\r\\nAlcohol \\t0.79\\r\\nBeer \\t1.02\\r\\nCrude Oil \\t0.95\\r\\nDiesel Fuel \\t0.88\\r\\nFuel Oil \\t1.4\\r\\nGasoline \\t0.74\\r\\nHeavy Water \\t1.1\\r\\nHelium-4 at 4.2 K \\t0.125\\r\\nHydrogen at 20 K \\t0.07\\r\\nPorter \\t1.04\\r\\nPropane \\t0.5\\r\\nKerosene \\t0.82\\r\\nWater, Fresh \\t1.0\\r\\nWater, Sea \\t1.03\\r\\nWine \\t1.0\\r\\nBrick, Soft \\t1.7\\r\\nBrick, Common \\t1.9\\r\\nBrick, Pressed \\t2.2\\r\\nConcrete, Lightweight \\t1.7 - 2.3\\r\\nConcrete, Standard \\t2.4\\r\\nConcrete, Hardened \\t3.0\\r\\nConcrete, Armor \\t3.5\\r\\nClay, dry \\t1.9-2.4\\r\\nDry Rubble Masonry \\t2.0\\r\\nMortared Rubble Masonry \\t2.4\\r\\nGranite, Quartz \\t2.7 - 3.0\\r\\nMarble, Limestone \\t2.3 - 2.8\\r\\nSandstone \\t2.1 - 2.4\\r\\nSlate \\t3.0\\r\\nStone, Soft in general \\t2.2\\r\\nStone, Hard in general \\t2.6\\r\\nEarth, Moist and Loose \\t1.3\\r\\nEarth, Hard Packed \\t1.5\\r\\nSilt and Clay, Dry \\t1.1\\r\\nSilt and Clay, Wet \\t2.1\\r\\nSand and Gravel, Dry Packed \\t1.9\\r\\nApple \\t0.8\\r\\nAsh \\t0.8\\r\\nBalsa \\t0.1\\r\\nCedar \\t0.5\\r\\nCork \\t0.2\\r\\nFir \\t0.5\\r\\nMahogany \\t0.6 - 1.0\\r\\nMaple \\t0.6 - 0.75\\r\\nOak \\t0.7 - 1.2\\r\\nPine \\t0.5\\r\\nRedwood \\t0.5\\r\\nWalnut \\t0.7\\r\\nYew \\t0.7\\r\\nSoft Wood, generic \\t0.40\\r\\nMedium Wood, generic \\t0.63\\r\\nHard Wood, generic \\t0.87\\r\\nAnimals, Live \\t1.0\\r\\nBaled Hay or Straw \\t0.7\\r\\nBone \\t1.3 - 1.9\\r\\nCanned Goods, in cases \\t0.7\\r\\nGeneral Cargo, in large amounts \\t0.5\\r\\nFish \\t0.8\\r\\nIce \\t0.9\\r\\nIvory \\t1.8\\r\\nOats, in bags \\t0.5\\r\\nPaper, most varieties \\t0.7\\r\\nRope, in coils \\t0.5\\r\\nRubber, vulcanized \\t1.1\\r\\nWax, paraffin \\t0.8\\r\\nWheat, in bulk \\t0.75"
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
