<object clone="/base/obj/thing" owner="christophera">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.4" density="0.6"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="true" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="luminometer"/>
            <Base:SName sname="meter"/>
            <Base:SName sname="box"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="boxes"/>
            <Base:PName pname="luminometers"/>
            <Base:PName pname="meters"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="light"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="sophisticated"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             luminometer
          </Base:Description>
          <Base:Description type="look">
             This is small, sophisticated looking box, with lenses and a display on it.
          </Base:Description>
          <Base:Description type="pbrief">
             luminometers
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="foo">1</Core:Property>
      <Core:Property property="merry:lib:dumpmap">
         X[M] # include \<type.h\>   
int     i, sz;   
    string result;   
    mixed  *values, *names;   
   
    if (!\$prefix) \{   
      \$prefix = "";   
    \}   
   
    sz     = map_sizeof(\$map);   
    names  = map_indices(\$map);   
    values = map_values(\$map);   
   
    result = "";   
   
    for (i = 0; i \< sz; i++) \{   
        string str1, str2;   
   
        if (i == sz - 1) \{   
            str1 = "`--.";   
            str2 = "....";   
        \} else \{   
            str1 = "\|--.";   
            str2 = "\|...";   
        \}   
        result += \$prefix + str1 + names[i] + "\\n";   
        if (typeof(values[i]) == T_MAPPING) \{   
          result += CallArg(this, "dumpmap",   
                           (\{ "map", values[i], "prefix", \$prefix + str2 \}));   
        \}   
    \}   
    return result;
      </Core:Property>
      <Core:Property property="merry:lib:dumpmap2">
         X[M] # include \<type.h\>   
int     i, sz;   
    string result;   
    mixed  *values, *names;   
   
    if (!\$prefix) \{   
      \$prefix = "";   
    \}   
   
    sz     = map_sizeof(\$map);   
    names  = map_indices(\$map);   
    values = map_values(\$map);   
   
    result = "";   
   
    for (i = 0; i \< sz; i++) \{   
        string str1, str2;   
   
        if (i == sz - 1) \{   
            str1 = "`--.";   
            str2 = "....";   
        \} else \{   
            str1 = "\|--.";   
            str2 = "\|...";   
        \}   
        result += \$prefix + str1 + names[i] + "\\n";   
        if (typeof(values[i]) == T_MAPPING) \{   
          result += CallArg(this, "dumpmap2",   
                           (\{ "map", values[i], "prefix", \$prefix + str2 \}));   
        \}   
    \}   
    return result;
      </Core:Property>
      <Core:Property property="merry:lib:reclite">
         X[M] mapping my_map;   
object *inv;   
string *det;   
float f, my_light;   
mixed tmp;   
int i;   
   
det = Get(\$obj, "base:details");   
   
my_map = ([ ]);   
   
for (i = 0; i \< sizeof(det); i ++) \{   
  f = Get(\$obj, "details:" + det[i] + ":luminosity");   
  if (f \> 0.0) \{   
    my_map += ([ "[" + f + "] /" + det[i] + "/" : TRUE ]);   
  \}   
  my_light += f;   
\}   
   
inv = Get(\$obj, "base:inventory");   
   
for (i = 0; i \< sizeof(inv); i ++) \{   
  my_map += CallArg(this, "reclite", (\{ "obj", inv[i] \}));   
  my_light += \$light;   
\}   
   
\$light = my_light;   
   
if (map_sizeof(my_map)) \{   
  tmp = my_map;   
\} else if (my_light \> 0.0) \{   
  tmp = TRUE;   
\} else \{   
  tmp = nil;   
\}   
return ([ "[" + my_light + "] " + Describe(\$obj, nil, \$actor) : tmp ]);
      </Core:Property>
      <Core:Property property="merry:lib:reclite2">
         X[M] mapping my_map;   
object *inv;   
string *det;   
float f, my_light;   
mixed tmp;   
int i;   
   
det = Get(\$obj, "base:details");   
   
my_map = ([ ]);   
   
for (i = 0; i \< sizeof(det); i ++) \{   
  f = Get(\$obj, "details:" + det[i] + ":luminosity");   
  if (f \> 0.0) \{   
    my_map += ([ "[" + f + "] /" + det[i] + "/" : TRUE ]);   
  \}   
  my_light += f;   
\}   
   
inv = Get(\$obj, "base:inventory");   
   
for (i = 0; i \< sizeof(inv); i ++) \{   
  my_map += CallArg(this, "reclite", (\{ "obj", inv[i] \}));   
  my_light += \$light;   
\}   
   
\$light = my_light;   
   
if (map_sizeof(my_map)) \{   
  tmp = my_map;   
\} else if (my_light \> 0.0) \{   
  tmp = TRUE;   
\} else \{   
  tmp = nil;   
\}   
return ([ "[" + my_light + "] " + Describe(\$obj, nil, \$actor) : tmp ]);
      </Core:Property>
      <Core:Property property="merry:react-post:point-dob">
         X[M] if (\$iob) \{   
  NRef ref;   
  if (sizeof(\$iob) \> 1) \{   
    EmitTo(\$actor, "Your luminometer is confused by the many targets. Please wave it at one thing at a time.\\n");   
    return TRUE;   
  \}   
  ref = \$iob[0];   
  \$obj = NRefOb(ref);   
  if (!IsPrime(ref)) \{   
    EmitTo(\$actor, "The luminosity of " + Describe(ref) + " is " +   
           Get(\$obj, "details:" + NRefDetail(ref) + ":luminosity") + ".\\n");   
    return TRUE;   
  \}   
\} else \{   
  \$obj = Get(\$actor, "base:environment");   
\}   
   
\$map = Call(this, "reclite");   
EmitTo(\$actor, dump_value(\$map));  
EmitTo(\$actor, Call(this, "dumpmap"));
      </Core:Property>
      <Core:Property property="merry:react-post:squeeze-dob">
         X[M] \$obj = Get(\$actor, "base:environment");   
\$map = Call(this, "reclite2");   
EmitTo(\$actor, Call(this, "dumpmap2"));
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1049770323, "christophera", "X", 1049775005, "christophera", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="0" state="Comment" user="ChristopherA">
           Modified from Zell:luminometer.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
