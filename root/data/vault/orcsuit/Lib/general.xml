<object clone="/obj/properties" owner="SkotOS">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="db:plurals">
         ([ "child":"children", "deer":"deer", "staff":"staves" ])
      </Core:Property>
      <Core:Property property="merry:lib:add_props">
         X[M] /*  
** Take a string, explode it, and add each element to an object's  
** snames, pnames, or adjectives. 
** 
** Arguments: 
** 
**  \$what - What object to do it on. 
**  \$names - The string containing the names to add 
**  \$detail - The id of the detail to set.  'default' is the default. 
**  \$props - A string containing codes to determine what to set. 
**   If \$props contains an 's', the snames are set. 
**   If \$props contains an 'p', snames and the pluralized versions of snames are set. 
**   If \$props contains an 'a', the adjectives are set. 
**    Note that \$props can have more than one letter. 
** 
**  030924 Orcsuit 
*/ 
 
string *names, detail; 
int i; 
 
if (!\$what)\{ 
 error("add_props: expected \$what");\} 
 
if (typeof(\$what)!= T_OBJECT)\{ 
 error("add_props: \$what is not an object");\} 
 
if (!\$names)\{ 
 return FALSE;\} 
 
if (typeof(\$names)!= T_STRING \&\& typeof(\$names)!= 0)\{ 
 error("add_props: \$names is not a string");\} 
 
if (!\$props)\{ 
 error("add_props: expected \$props");\} 
 
if (typeof(\$props)!= T_STRING)\{ 
 error("add_props: \$props is not a string");\} 
 
if (typeof(\$detail) == T_STRING)\{ 
 detail = \$detail;\} 
else\{ 
 detail = "default";\} 
 
names = explode(lower_case(\$names), " "); 
 
for(i=0;i\<sizeof(names);i++) 
\{ 
 if (contains(\$props, "a"))\{ 
  Set(\$what, "details:" + detail + ":adjectives:" + names[i],1);\} 
 if (contains(\$props, "s"))\{ 
  Set(\$what, "details:" + detail + ":snames:" + names[i],1);\} 
 if (contains(\$props, "p"))\{ 
  Set(\$what, "details:" + detail + ":snames:" + names[i], Call(\$\{orcsuit:Lib:general\}, "pluralize", \$noun: names[i]));\} 
\}
      </Core:Property>
      <Core:Property property="merry:lib:gerund">
         X[M] /* 
** Turns a verb string into its gerund form 
** Examples:  "eat" becomes "eating", "stare" becomes "staring" 
** 
** Arguments: 
**  \$gerund (string) - the verb to transform.  Is set to the gerund form by 
**   this function. 
** 
** Returns \$gerund after modifications. 
** 
** 030914 James Sanders 
*/ 
 
string gerund, tmpstr, tmpstr2; 
string *doubles; 
int i; 
 
if (typeof(\$gerund) != 3) 
\{ 
 Error("gerund: \$gerund is not a string"); 
\} 
gerund = \$gerund; 
 
/*drop any lone e at the end, but leave double-e's alone (like 'free').*/ 
sscanf(gerund + "\&", "%se\&", tmpstr); 
if(tmpstr) 
\{ 
 sscanf(gerund + "\&", "%see\&", tmpstr2); 
 if (tmpstr2 == nil) 
 \{ 
  gerund = tmpstr; 
 \} 
\} 
else 
\{ 
 doubles = (\{ "b", "d", "g", "m", "t", "z" \}); 
 for ( i = 0; i \< 6; i++ ) 
 \{ 
  sscanf(gerund + "\&", "%s" + doubles[i] + "\&", tmpstr); 
  if (tmpstr) 
  \{ 
   gerund = gerund + doubles[i]; 
   i=26; 
  \} 
 \} 
\} 
gerund = gerund + "ing"; 
return gerund;
      </Core:Property>
      <Core:Property property="merry:lib:getobject">
         X[M] /* 
** Takes a value \$objectval and tries to get an object out of it, returning the object or nil. 
**  
** Arguments: 
**  \$objectval - the value to convert to an object. 
**   
** In                   Out  
** nil                  nil 
** int                  nil - though maybe it should return /base/obj/thing#xxxxx 
** float                nil 
** string               The object with the woename of the string, or nil if there is no such object. 
** object               The same value. 
** array w/ 1 element   This function on that element. 
** other array          nil 
** mapping w/ 1 element This function on that element. 
** other mapping        nil 
** 
** Sample usage: 
** 
** if (myobj = Call(\$\{orcsuit:Lib:poses\}, "getobject", \$objectval: \$what)) 
** \{ 
**  \<mess with myobj, as it's now an object\> 
** \} 
** else 
** \{ 
**  \<do nothing with myobj, as it's nil\> 
** \} 
*/ 
 
object objectval; 
string mapvalue; 
 
if (typeof(\$objectval) \< 3) 
\{ 
 objectval = nil; 
\} 
if (typeof(\$objectval) == 3) 
\{ 
 objectval = Obj(\$objectval); 
\} 
if (typeof(\$objectval) == 5) 
\{ 
 if (sizeof(\$objectval) == 1) 
 \{ 
  objectval = \$objectval[0]; 
  objectval = Call(\$\{orcsuit:Lib:poses\}, "getobject", \$objectval: objectval); 
 \} 
 else 
 \{ 
  objectval = nil; 
 \} 
\} 
if (typeof(\$objectval) == 6) 
\{ 
 if (map_sizeof(\$objectval) == 1) 
 \{ 
  mapvalue = map_values(\$objectval)[0]; 
  objectval = Call(\$\{orcsuit:Lib:general\}, "getobject", \$objectval: objectval); 
 \} 
 else 
 \{ 
  objectval = nil; 
 \} 
\} 
return objectval;
      </Core:Property>
      <Core:Property property="merry:lib:pluralize">
         X[M] /* 
** Gets the plural form of a noun. 
** First looks in a mapping to see if the plural is specially defined; 
**  if not, does the standard -s or -es. 
** 
** Arguments: 
** 
**  \$noun - The noun to pluralize. 
** 
** Returns the plural form. 
*/ 
 
int i; 
string tmpstr; 
string *es; 
string *des; 
string *ies; 
 
if (typeof(\$noun) != T_STRING)\{ 
 return nil;\} 
 
if (this."db:plurals"[\$noun]) \{ 
 return this."db:plurals"[\$noun]; \} 
 
es = (\{ "s", "x", "h" \}); 
des = (\{ "z" \}); 
ies = (\{ "ey" \}); 
for(i=0;i\<sizeof(es);i++) 
\{ 
 sscanf(\$noun, "%s" + es[i], tmpstr); 
 if (tmpstr \&\& tmpstr !="") \{ 
  return \$noun + "es";\} 
\} 
 
for(i=0;i\<sizeof(des);i++) 
\{ 
 sscanf(\$noun, "%s" + des[i], tmpstr); 
 if (tmpstr \&\& tmpstr !="") \{ 
  return \$noun + des[i] + "es";\} 
\} 
 
for(i=0;i\<sizeof(ies);i++) 
\{ 
 sscanf(\$noun, "%se" + ies[i], tmpstr); 
 if (tmpstr \&\& tmpstr !="") \{ 
  return tmpstr + "ies";\} 
\} 
return \$noun + "s";
      </Core:Property>
      <Core:Property property="merry:lib:pseudorandom">
         X[M] /* 
** D=Takes a seed and a salt value, and creates a pseudo-random integer 
**  that will always be the same with the same input. 
**  
** Arguments: 
** 
**  \$seed - Any value of any type. Different values yield different results. 
**  \$salt - Any value of any type. Used to let the same seed be used to get 
**   different results. 
**  \$max - Optional numerical value; if nonzero, the return value is no larger 
**   than the absolute value of \$max.  Regardless of max, this function never 
**   returns a value greater than 65536. 
** 
** Returns: 
**  A positive integer that will always be the same for the same input. 
** 
** 040322 Orcsuit 
*/ 
 
float seed, salt, max, result; 
 
result = Flt(hash_crc16(dump_value( (\{ \$seed, \$salt \}) ))); 
 
if(typeof(\$max) \< T_STRING) 
 max = fabs(Flt(\$max)); 
 
if(max) 
 result = fmod(result, max); 
 
return Int(result);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1063718649, "orcsuit", "X", 1064178957, "orcsuit", "E", 1064179562, "orcsuit", "E", 1064422646, "orcsuit", "E", 1064422768, "orcsuit", "E", 1064423055, "orcsuit", "E", 1064423215, "orcsuit", "E", 1064429427, "orcsuit", "E", 1064654081, "orcsuit", "E", 1064815152, "orcsuit", "E", 1064815219, "orcsuit", "E", 1068347338, "orcsuit", "E", 1068350527, "orcsuit", "E", 1068352393, "orcsuit", "E", 1068352725, "orcsuit", "E", 1068356867, "orcsuit", "E", 1068357093, "orcsuit", "E", 1068357138, "orcsuit", "E", 1079981035, "orcsuit", "E", 1079981092, "orcsuit", "E", 1079981435, "orcsuit", "E", 1079981565, "orcsuit", "E", 1079982226, "orcsuit", "E", 1079982469, "orcsuit", "E", 1079982570, "orcsuit", "E", 1083010728, "orcsuit", "E", 1083010829, "orcsuit", "E", 1221895877, "orcsuit", "X" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
