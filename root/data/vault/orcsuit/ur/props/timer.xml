<object clone="/base/obj/thing" owner="SkotOS">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.2" density="7.5"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="true" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst>
         Your timer explodes into tiny pieces.
      </Base:DieMessageFirst>
      <Base:DieMessageThird>
         A timer explodes into tiny pieces.
      </Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="timer"/>
            <Base:SName sname="slider"/>
            <Base:SName sname="machine"/>
            <Base:SName sname="device"/>
            <Base:SName sname="thing"/>
            <Base:SName sname="object"/>
            <Base:SName sname="item"/>
            <Base:SName sname="everything"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="devices"/>
            <Base:PName pname="everythings"/>
            <Base:PName pname="items"/>
            <Base:PName pname="machines"/>
            <Base:PName pname="objects"/>
            <Base:PName pname="sliders"/>
            <Base:PName pname="things"/>
            <Base:PName pname="timers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="Quinn"/>
          <Base:Adjective adjective="buttoned"/>
          <Base:Adjective adjective="curved"/>
          <Base:Adjective adjective="grey"/>
          <Base:Adjective adjective="handheld"/>
          <Base:Adjective adjective="metal"/>
          <Base:Adjective adjective="metallic"/>
          <Base:Adjective adjective="paneled"/>
          <Base:Adjective adjective="slider"/>
          <Base:Adjective adjective="sliding"/>
          <Base:Adjective adjective="slightly"/>
          <Base:Adjective adjective="slim"/>
          <Base:Adjective adjective="timing"/>
          <Base:Adjective adjective="wormhole"/>
          <Base:Adjective adjective="wormholing"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             handheld timer
          </Base:Description>
          <Base:Description type="examine">
             A roughly 10'x2', grey metallic object, curved to fit comfortably into the hand.  It has a large LED number panel near the top, and an array of buttons below it.
          </Base:Description>
          <Base:Description type="look">
             A handheld object with buttons and a timer display.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="button-close" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="button"/>
            <Base:SName sname="control"/>
            <Base:SName sname="closer"/>
            <Base:SName sname="pushbutton"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="buttons"/>
            <Base:PName pname="closer"/>
            <Base:PName pname="controls"/>
            <Base:PName pname="pushbuttons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="close"/>
          <Base:Adjective adjective="closer"/>
          <Base:Adjective adjective="closing"/>
          <Base:Adjective adjective="deactivate"/>
          <Base:Adjective adjective="deactivating"/>
          <Base:Adjective adjective="deactivator"/>
          <Base:Adjective adjective="engraved"/>
          <Base:Adjective adjective="mark"/>
          <Base:Adjective adjective="marking"/>
          <Base:Adjective adjective="polished"/>
          <Base:Adjective adjective="round"/>
          <Base:Adjective adjective="silver"/>
          <Base:Adjective adjective="slider"/>
          <Base:Adjective adjective="sliding"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="terminator"/>
          <Base:Adjective adjective="timer"/>
          <Base:Adjective adjective="timing"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             timer button
          </Base:Description>
          <Base:Description type="look">
             A round silver button.  It has a small engraving on it, reading 'Deactivate'.
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             The timer's button smells slightly metallic.
          </Base:Description>
          <Base:Description type="react-post:sense/taste-dob">
             The timer's button tastes bitter and metallic.
          </Base:Description>
          <Base:Description type="writing">
             Deactivate
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="button-erase" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="button"/>
            <Base:SName sname="control"/>
            <Base:SName sname="delete"/>
            <Base:SName sname="pushbutton"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="buttons"/>
            <Base:PName pname="controls"/>
            <Base:PName pname="deleter"/>
            <Base:PName pname="pushbuttons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="delete"/>
          <Base:Adjective adjective="deleter"/>
          <Base:Adjective adjective="deleting"/>
          <Base:Adjective adjective="engraved"/>
          <Base:Adjective adjective="erase"/>
          <Base:Adjective adjective="eraser"/>
          <Base:Adjective adjective="erasing"/>
          <Base:Adjective adjective="kill"/>
          <Base:Adjective adjective="killing"/>
          <Base:Adjective adjective="polished"/>
          <Base:Adjective adjective="round"/>
          <Base:Adjective adjective="silver"/>
          <Base:Adjective adjective="slider"/>
          <Base:Adjective adjective="sliding"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="timer"/>
          <Base:Adjective adjective="timing"/>
          <Base:Adjective adjective="unmark"/>
          <Base:Adjective adjective="unmarker"/>
          <Base:Adjective adjective="unmarking"/>
          <Base:Adjective adjective="unset"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             timer button
          </Base:Description>
          <Base:Description type="look">
             A round silver button.  It has a small engraving on it, reading 'Erase'.
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             The timer's button smells slightly metallic.
          </Base:Description>
          <Base:Description type="react-post:sense/taste-dob">
             The timer's button tastes bitter and metallic.
          </Base:Description>
          <Base:Description type="writing">Erase</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="button-list" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="button"/>
            <Base:SName sname="control"/>
            <Base:SName sname="lister"/>
            <Base:SName sname="pushbutton"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="buttons"/>
            <Base:PName pname="controls"/>
            <Base:PName pname="listers"/>
            <Base:PName pname="pushbuttons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="data"/>
          <Base:Adjective adjective="engraved"/>
          <Base:Adjective adjective="info"/>
          <Base:Adjective adjective="information"/>
          <Base:Adjective adjective="list"/>
          <Base:Adjective adjective="lister"/>
          <Base:Adjective adjective="listing"/>
          <Base:Adjective adjective="mark"/>
          <Base:Adjective adjective="marking"/>
          <Base:Adjective adjective="memory"/>
          <Base:Adjective adjective="polished"/>
          <Base:Adjective adjective="round"/>
          <Base:Adjective adjective="silver"/>
          <Base:Adjective adjective="slider"/>
          <Base:Adjective adjective="sliding"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="timer"/>
          <Base:Adjective adjective="timing"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             timer button
          </Base:Description>
          <Base:Description type="look">
             A round silver button.  It has a small engraving on it, reading 'Memory'.
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             The timer's button smells slightly metallic.
          </Base:Description>
          <Base:Description type="react-post:sense/taste-dob">
             The timer's button tastes bitter and metallic.
          </Base:Description>
          <Base:Description type="writing">Memory</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="button-new" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="button"/>
            <Base:SName sname="control"/>
            <Base:SName sname="recorder"/>
            <Base:SName sname="pushbutton"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="buttons"/>
            <Base:PName pname="controls"/>
            <Base:PName pname="pushbuttons"/>
            <Base:PName pname="recorder"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="engraved"/>
          <Base:Adjective adjective="mark"/>
          <Base:Adjective adjective="marking"/>
          <Base:Adjective adjective="new"/>
          <Base:Adjective adjective="polished"/>
          <Base:Adjective adjective="record"/>
          <Base:Adjective adjective="recorder"/>
          <Base:Adjective adjective="recording"/>
          <Base:Adjective adjective="round"/>
          <Base:Adjective adjective="set"/>
          <Base:Adjective adjective="setting"/>
          <Base:Adjective adjective="silver"/>
          <Base:Adjective adjective="slider"/>
          <Base:Adjective adjective="sliding"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="timer"/>
          <Base:Adjective adjective="timing"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             timer button
          </Base:Description>
          <Base:Description type="look">
             A round silver button.  It has a small engraving on it, reading 'Record'.
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             The timer's button smells slightly metallic.
          </Base:Description>
          <Base:Description type="react-post:sense/taste-dob">
             The timer's button tastes bitter and metallic.
          </Base:Description>
          <Base:Description type="writing">Record</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="button-open" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="button"/>
            <Base:SName sname="control"/>
            <Base:SName sname="opener"/>
            <Base:SName sname="pushbutton"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="buttons"/>
            <Base:PName pname="controls"/>
            <Base:PName pname="opener"/>
            <Base:PName pname="pushbuttons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="activate"/>
          <Base:Adjective adjective="activating"/>
          <Base:Adjective adjective="activation"/>
          <Base:Adjective adjective="engraved"/>
          <Base:Adjective adjective="mark"/>
          <Base:Adjective adjective="marking"/>
          <Base:Adjective adjective="open"/>
          <Base:Adjective adjective="opening"/>
          <Base:Adjective adjective="polished"/>
          <Base:Adjective adjective="portal"/>
          <Base:Adjective adjective="portalling"/>
          <Base:Adjective adjective="round"/>
          <Base:Adjective adjective="silver"/>
          <Base:Adjective adjective="slider"/>
          <Base:Adjective adjective="sliding"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="timer"/>
          <Base:Adjective adjective="timing"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             timer button
          </Base:Description>
          <Base:Description type="look">
             A round silver button.  It has a small engraving on it, reading 'Activate'.
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             The timer's button smells slightly metallic.
          </Base:Description>
          <Base:Description type="react-post:sense/taste-dob">
             The timer's button tastes bitter and metallic.
          </Base:Description>
          <Base:Description type="writing">
             Activate
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="button-power" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="button"/>
            <Base:SName sname="control"/>
            <Base:SName sname="powerer"/>
            <Base:SName sname="pushbutton"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="buttons"/>
            <Base:PName pname="controls"/>
            <Base:PName pname="powerers"/>
            <Base:PName pname="pushbuttons"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="disable"/>
          <Base:Adjective adjective="enable"/>
          <Base:Adjective adjective="engraved"/>
          <Base:Adjective adjective="off"/>
          <Base:Adjective adjective="on"/>
          <Base:Adjective adjective="on/off"/>
          <Base:Adjective adjective="polished"/>
          <Base:Adjective adjective="power"/>
          <Base:Adjective adjective="powerer"/>
          <Base:Adjective adjective="powering"/>
          <Base:Adjective adjective="round"/>
          <Base:Adjective adjective="silver"/>
          <Base:Adjective adjective="slider"/>
          <Base:Adjective adjective="sliding"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="timer"/>
          <Base:Adjective adjective="timing"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             timer button
          </Base:Description>
          <Base:Description type="look">
             A round silver button.  It has a small engraving on it, reading 'Power'.
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             The timer's button smells slightly metallic.
          </Base:Description>
          <Base:Description type="react-post:sense/taste-dob">
             The timer's button tastes bitter and metallic.
          </Base:Description>
          <Base:Description type="writing">Power</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="button-save" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="button"/>
            <Base:SName sname="control"/>
            <Base:SName sname="saver"/>
            <Base:SName sname="pushbutton"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="buttons"/>
            <Base:PName pname="controls"/>
            <Base:PName pname="pushbuttons"/>
            <Base:PName pname="savers"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="back"/>
          <Base:Adjective adjective="backing"/>
          <Base:Adjective adjective="engraved"/>
          <Base:Adjective adjective="last"/>
          <Base:Adjective adjective="lasting"/>
          <Base:Adjective adjective="polished"/>
          <Base:Adjective adjective="round"/>
          <Base:Adjective adjective="save"/>
          <Base:Adjective adjective="saver"/>
          <Base:Adjective adjective="saving"/>
          <Base:Adjective adjective="silver"/>
          <Base:Adjective adjective="slider"/>
          <Base:Adjective adjective="sliding"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="timer"/>
          <Base:Adjective adjective="timing"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             timer button
          </Base:Description>
          <Base:Description type="look">
             A round silver button.  It has a small engraving on it, reading 'Last'.
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             The timer's button smells slightly metallic.
          </Base:Description>
          <Base:Description type="react-post:sense/taste-dob">
             The timer's button tastes bitter and metallic.
          </Base:Description>
          <Base:Description type="writing">Last</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="display" prime="false" def="false" abstract="false" hidden="false" luminosity="3" targetable_in_dark="true" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="true" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="led"/>
            <Base:SName sname="panel"/>
            <Base:SName sname="display"/>
            <Base:SName sname="number"/>
            <Base:SName sname="digit"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="digits"/>
            <Base:PName pname="displays"/>
            <Base:PName pname="leds"/>
            <Base:PName pname="numbers"/>
            <Base:PName pname="panels"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="LED"/>
          <Base:Adjective adjective="countdown"/>
          <Base:Adjective adjective="crystal"/>
          <Base:Adjective adjective="glass"/>
          <Base:Adjective adjective="glowing"/>
          <Base:Adjective adjective="large"/>
          <Base:Adjective adjective="liquid"/>
          <Base:Adjective adjective="lit"/>
          <Base:Adjective adjective="lit-up"/>
          <Base:Adjective adjective="numbered"/>
          <Base:Adjective adjective="red"/>
          <Base:Adjective adjective="slider"/>
          <Base:Adjective adjective="sliding"/>
          <Base:Adjective adjective="timer"/>
          <Base:Adjective adjective="timing"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             timer display
          </Base:Description>
          <Base:Description type="examine">
             A large, red LCD panel.  It has 6 large bulky digits, which currently read 05:00 and goes down each second.
          </Base:Description>
          <Base:Description type="look">
             A red LCD display that displays digits that count down.  It currently reads 05:00.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Combat>
      <Base:Strength value="1"/>
      <Base:MaxFatigue value="1"/>
    </Base:Combat>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:tele:destinations">
         ([  ])
      </Core:Property>
      <Core:Property property="export:tele:urportal">
         \<orcsuit:ur:props:wormhole\>
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] object where; 
 
where = this; 
while(where."base:environment") \{ 
 where = where."base:environment"; \} 
this."tele:destinations" = ([ ]); 
this."tele:destinations"["origin"] = where;
      </Core:Property>
      <Core:Property property="merry:act:stop">
         X[M] int i; 
Call(this, "close"); 
if(typeof(this."tele:portal") == T_ARRAY) 
\{ 
 for(i=0;i\<2;i++) 
 \{ 
  if( typeof(this."tele:portal"[i]) == T_OBJECT ) 
   Slay(this."tele:portal"[i]); 
 \} 
\}
      </Core:Property>
      <Core:Property property="merry:lib:close">
         X[M] int action, i; 
 
for(i=0;i\<2;i++) 
\{ 
 if( typeof(this."tele:portal"[i]) == T_OBJECT \&\& 
    this."tele:portal"[i]."base:environment") 
 \{ 
  Call(this, "emits", \$emit: 5, \$what: this."tele:portal"[i]); /*portal close*/ 
  this."tele:portal"[i]."base:environment" = nil; 
  action = 1; 
 \} 
\} 
 
return action;
      </Core:Property>
      <Core:Property property="merry:lib:emits">
         X[M] string *bits; 
 
bits = allocate(3); 
 
switch(\$emit) 
\{ 
 case 1: 
  bits[0] = " beeps."; 
  break; 
 case 2: 
  bits[0] = " emits some crackling static."; 
  break; 
 case 3: 
  bits[0] = " emits a few faint rays of light."; 
  break; 
 case 4: 
  bits[0] = Describe(\$what) + " bursts into existance."; 
  EmitIn(\$what."base:environment", bits[0]); 
  return 0; 
 case 5: 
  bits[0] = Describe(\$what) + " collapses and disappears."; 
  EmitIn(\$what."base:environment", bits[0]); 
  return 0; 
 case 6: 
  bits[0]= Describe(\$target, nil, \$actor) + " clicks silently."; 
  EmitTo(\$actor, bits[0]); 
 default: 
  bits[0] = " buzzes."; 
  break; 
\} 
 
bits[1] = Describe(this, nil, \$actor); 
bits[2] = Describe(this, nil, nil); 
EmitTo(\$actor, bits[1]+bits[0]); 
EmitIn(\$actor."base:environment", bits[2]+bits[0], \$actor);
      </Core:Property>
      <Core:Property property="merry:lib:open">
         X[M] object *portals; 
int i; 
 
if(typeof(this."tele:urportal") != T_OBJECT) 
 return 0; 
portals = allocate(2); 
 
if(typeof(this."tele:portal") != T_ARRAY) 
 this."tele:portal" = allocate(2); 
 
for(i=0;i\<2;i++) 
\{ 
 if( typeof(this."tele:portal"[i]) != T_OBJECT) 
  this."tele:portal"[i]= Spawn(this."tele:urportal"); 
 portals[i]=this."tele:portal"[i]; 
 portals[i]."tele:controller" = this; 
\} 
portals[0]."details:default:exit:dest" = NewNRef(portals[1], "default"); 
portals[1]."details:default:exit:dest" = NewNRef(portals[0], "default"); 
 
portals[0]."base:environment" = \$origin; 
if(portals[0]."base:environment" == \$origin) 
\{ 
 portals[1]."base:environment" = \$destination; 
 if(portals[1]."base:environment" == \$destination) 
 \{ 
  this."tele:destinations"["last"] = \$origin; 
  return 1; 
 \} 
\} 
portals[0]."base:environment" = nil; 
portals[1]."base:environment" = nil; 
return 0;
      </Core:Property>
      <Core:Property property="merry:react-post:push-dob">
         X[M] int i, n; 
string emit, *ind; 
mapping dests; 
 
/*Timer inactive for 5 seconds after opening a portal.*/ 
if ( time() - Int(this."tele:lastuse") \< 5) 
 return nil; 
 
/*Some basic setup and error checking, so it can be skipped in individual cases*/ 
if(typeof(this."tele:destinations") != T_MAPPING) 
 this."tele:destinations" = ([ ]); 
if(typeof(this."tele:portal") != T_ARRAY \|\| sizeof(this."tele:portal") \< 2) 
 this."tele:portal" = allocate(2); 
 
switch(\$button) 
\{ 
 case "new": 
  if(\$(raw-evoke) \&\& typeof(this."tele:destinations"[\$(raw-evoke)]) != T_OBJECT) 
  \{ 
   this."tele:destinations"[\$(raw-evoke)] = \$actor."base:environment"; 
   Call(this, "emits", \$emit: 1); /*beep*/ 
  \} 
  else 
   Call(this, "emits"); /*buzz*/ 
  break; 
 case "save": 
  if( \$(raw-evoke) \&\& typeof(this."tele:destinations"[\$(raw-evoke)]) != T_OBJECT 
      \&\& typeof(this."tele:destinations"["last"]) == T_OBJECT ) 
  \{ 
   this."tele:destinations"[\$(raw-evoke)] = this."tele:destinations"["last"]; 
   Call(this, "emits", \$emit: 1); /*beep*/ 
  \} 
  else 
   Call(this, "emits"); /*buzz*/ 
  break; 
 case "erase": 
  if(this."tele:destinations"[\$(raw-evoke)]) 
  \{ 
   this."tele:destinations"[\$(raw-evoke)] = nil; 
   Call(this, "emits", \$emit: 1); /*beep*/ 
  \} 
  else 
   Call(this, "emits"); /*buzz*/ 
  break; 
 case "open": 
  if( \$(raw-evoke) ) 
  \{ 
   \$destination = this."tele:destinations"[\$(raw-evoke)]; 
   if(typeof(\$destination) == T_OBJECT) 
   \{ 
    Call(this, "emits", \$emit: 1); /*beep*/ 
    \$origin = \$actor."base:environment"; 
    Call(this, "close"); 
    Call(this, "emits", \$emit: 3); /*beam*/ 
    this."tele:lastuse" = time(); 
    if( Call(this, "open") ) 
    \{ 
     Call(this, "emits", \$emit: 4, \$what: this."tele:portal"[0]); /*portal open*/ 
     Call(this, "emits", \$emit: 4, \$what: this."tele:portal"[1]); /*portal open*/ 
     break; 
    \} 
    else 
     Call(this, "emits", \$emit: 2); /*crackle*/ 
    break; 
   \} 
  \} 
  Call(this, "emits"); /*buzz*/ 
  break; 
 case "close": 
  if( Call(this, "close") ) 
   Call(this, "emits", \$emit: 1); /*beep*/ 
  else 
   Call(this, "emits"); /*buzz*/ 
  break; 
 case "list": 
  emit = Describe(this, nil, \$actor); 
  dests = this."tele:destinations"; 
  n=map_sizeof(dests); 
  if(n) 
  \{ 
   Call(this, "emits", \$emit: 1); /*beep*/ 
   emit = "The following quickly flashes on the display of "+emit+":"; 
   ind = map_indices(dests); 
   for(i=0;i\<n;i++) 
   \{ 
    emit+= "\\n" + Str(ind[i]); 
    if(\$adverb \&\& \$adverb == "firmly") 
     emit += " -- " + dump_value( dests[ind[i]] ); 
   \} 
  \} 
  else 
  \{ 
   Call(this, "emits"); /*buzz*/ 
   emit += "'s display blanks out momentarily."; 
  \} 
  EmitTo(\$actor, emit); 
 default: 
  break; 
\}
      </Core:Property>
      <Core:Property property="merry:react:push-dob">
         X[M] /*If a button is pushed, the visible evoke is removed, and since we're doing a sscanf anyway, we set \$button for later use as well.*/ 
if( sscanf(NRefDetail(\$target), "button-%s", \$button) ); 
 \$evoke = nil; 
return 1;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1056544632, "orcsuit", "E", 1056544757, "orcsuit", "E", 1056545110, "orcsuit", "E", 1056761676, "orcsuit", "E", 1056780237, "orcsuit", "X", 1056780932, "orcsuit", "X", 1056781741, "orcsuit", "X", 1056782232, "orcsuit", "X", 1056782293, "orcsuit", "X", 1056782380, "orcsuit", "X", 1056782722, "orcsuit", "X", 1056782898, "orcsuit", "X", 1056783050, "orcsuit", "X", 1056783333, "orcsuit", "X", 1056783490, "orcsuit", "X", 1056784812, "orcsuit", "X", 1056785413, "orcsuit", "X", 1056789899, "orcsuit", "X", 1056793504, "orcsuit", "X", 1056793556, "orcsuit", "X", 1056839666, "orcsuit", "X", 1079760834, "orcsuit", "E", 1079760853, "orcsuit", "E", 1079762169, "orcsuit", "E", 1079762344, "orcsuit", "E", 1079762538, "orcsuit", "E", 1079762598, "orcsuit", "E", 1079762729, "orcsuit", "E", 1079762959, "orcsuit", "E", 1079762986, "orcsuit", "E", 1079763065, "orcsuit", "E", 1079763245, "orcsuit", "E", 1079763283, "orcsuit", "E", 1079763323, "orcsuit", "E", 1079763351, "orcsuit", "E", 1079763443, "orcsuit", "E", 1079766698, "orcsuit", "E", 1079766779, "orcsuit", "E", 1079767010, "orcsuit", "E", 1079767036, "orcsuit", "E", 1079767063, "orcsuit", "E", 1079767120, "orcsuit", "E", 1079767228, "orcsuit", "E", 1079769190, "orcsuit", "E", 1079776705, "orcsuit", "E", 1079776745, "orcsuit", "E", 1079776968, "orcsuit", "E", 1079776993, "orcsuit", "E", 1079776994, "orcsuit", "E", 1079777128, "orcsuit", "E", 1079777143, "orcsuit", "E", 1079778218, "orcsuit", "E", 1079778248, "orcsuit", "E", 1079779685, "orcsuit", "E", 1079781241, "orcsuit", "E", 1079781274, "orcsuit", "E", 1079781566, "orcsuit", "E", 1079781646, "orcsuit", "E", 1079781785, "orcsuit", "E", 1079781996, "orcsuit", "E", 1079782083, "orcsuit", "E", 1079782168, "orcsuit", "E", 1079782224, "orcsuit", "E", 1079782244, "orcsuit", "E", 1079782244, "orcsuit", "E", 1079782274, "orcsuit", "E", 1079782469, "orcsuit", "E", 1079784813, "orcsuit", "E", 1079784898, "orcsuit", "E", 1079787263, "orcsuit", "E", 1079787420, "orcsuit", "E", 1079787849, "orcsuit", "E", 1079788277, "orcsuit", "E", 1079788398, "orcsuit", "E", 1079789648, "orcsuit", "E", 1079790069, "orcsuit", "E", 1079790213, "orcsuit", "E", 1079790302, "orcsuit", "E", 1079790324, "orcsuit", "E", 1079790776, "orcsuit", "E", 1079790807, "orcsuit", "E", 1079790858, "orcsuit", "E", 1079790907, "orcsuit", "E", 1079790925, "orcsuit", "E", 1079790955, "orcsuit", "E", 1079791017, "orcsuit", "E", 1079791045, "orcsuit", "E", 1079791055, "orcsuit", "E", 1079791065, "orcsuit", "E", 1079791072, "orcsuit", "E", 1079791343, "orcsuit", "E", 1079794590, "orcsuit", "E", 1079794626, "orcsuit", "E", 1079795119, "orcsuit", "E", 1079795239, "orcsuit", "E", 1079795294, "orcsuit", "E", 1079795416, "orcsuit", "E", 1079795661, "orcsuit", "E", 1079795828, "orcsuit", "E", 1079795839, "orcsuit", "E", 1079796790, "orcsuit", "E", 1079796892, "orcsuit", "E", 1079796915, "orcsuit", "E", 1079797858, "orcsuit", "E", 1079798392, "orcsuit", "E", 1079798499, "orcsuit", "E", 1079798633, "orcsuit", "E", 1079798987, "orcsuit", "E", 1079799121, "orcsuit", "E", 1079799196, "orcsuit", "E", 1079799717, "orcsuit", "E", 1079799812, "orcsuit", "E", 1079800114, "orcsuit", "E", 1079801501, "orcsuit", "E", 1079801645, "orcsuit", "E", 1079801650, "orcsuit", "E", 1079801664, "orcsuit", "E", 1079801733, "orcsuit", "E", 1079801821, "orcsuit", "E", 1079805059, "orcsuit", "E", 1079805083, "orcsuit", "E", 1079805208, "orcsuit", "E", 1079806022, "orcsuit", "E", 1079806061, "orcsuit", "E", 1079806249, "orcsuit", "E", 1079806263, "orcsuit", "E", 1079990586, "orcsuit", "E", 1079990785, "orcsuit", "E", 1079990844, "orcsuit", "E", 1079991209, "orcsuit", "E", 1081921023, "orcsuit", "E", 1081944724, "orcsuit", "E", 1081945009, "orcsuit", "E", 1081945436, "orcsuit", "E", 1081945626, "orcsuit", "E", 1265455723, "orcsuit", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
