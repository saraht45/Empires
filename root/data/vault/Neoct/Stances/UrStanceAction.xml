<object clone="/usr/SkotOS/obj/meracha" owner="SkotOS">
  <SkotOS:MerAcHa action_id="stance">
    <Core:PCProperties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:        Neoct:Stances:UrStanceAction
 Maintainer:    Kalle Alm
 Email:         kalle@mortalis.skotos.net
 Revision:      1.4
 Generated:     Sun Jul  5 02:47:00 2009 on Castle Marrach
 Last revision: Wed Mar 22 07:50:58 2006 by zwoc (P)



(Do not modify #list# -- it is automatically constructed.)


------------------------------------------------------------------------------------
 global-pre:action (M) Stance Ur action (pre). Mostly for backwards compatibility.
 global:action     (M) Stance Ur action.
------------------------------------------------------------------------------------

*/
      </Core:Property>
      <Core:Property property="merry:global-desc:action">
         X[M] if( \$actor.desc ) \{ 
  \$actor.desc = nil; 
  return TRUE; 
\} else  
  return FALSE;
      </Core:Property>
      <Core:Property property="merry:global-pre:action">
         X[M] /*
  D=Stance Ur action (pre). Mostly for backwards compatibility.
*/

mapping PREPS;
int VOLITION, *vols, i, sz;

PREPS = ([ "at" : PREP_NEAR, "on top of" : PREP_ON, "to" : PREP_NEAR, "by" : PREP_NEAR, "near" : PREP_NEAR, "beside" : PREP_BESIDE, "before" : PREP_BEFORE, "in front of" : PREP_BEFORE, "across from" : PREP_BEFORE, "behind" : PREP_BEHIND, "next to" : PREP_BESIDE, "on" : PREP_ON, "on top of " : PREP_ON, "in" : PREP_INSIDE, "inside" : PREP_INSIDE, "close to" : PREP_CLOSE_TO, "close" : PREP_NEAR, "under" : PREP_UNDER, "beneath" : PREP_UNDER, "close by" : PREP_NEAR, "close beside" : PREP_BESIDE, "against" : PREP_AGAINST, "below" : PREP_UNDER, "upon" : PREP_ON, "atop" : PREP_ON, "within" : PREP_INSIDE, "near to" : PREP_NEAR, "nearby" : PREP_NEAR, "over" : PREP_OVER, "above" : PREP_OVER ]);

VOLITION = PREP_NEAR + PREP_ON + PREP_CLOSE_TO + PREP_BESIDE + PREP_BEFORE + PREP_BEHIND + PREP_AGAINST;

/* 'vols' is used to apply base prepositions on prime details */
vols = (\{ PREP_NEAR, PREP_ON, PREP_CLOSE_TO, PREP_BESIDE, PREP_BEFORE, PREP_BEHIND, PREP_AGAINST \});

if( (!\$where \&\& (sizeof( \$roles )) \|\| sizeof( \$roles ) \> 1 \|\| ( !sizeof( \$roles ) \&\& \$vob."stance:evoke_social" \&\& \$evoke) ))
  return TRUE;


if( \$where )
\{
  object ob;

  ob = NRefOb( \$where[0] );

  if( ob == \$actor ) \{
    EmitTo( \$actor, "You can't "+\$imperative+" "+\$(where:preposition)+" yourself!" );
    return FALSE;
  \}
  else
  if( ob."base:environment" \&\& ob."base:environment" != \$actor."base:environment" )
  \{
    EmitTo( \$actor, "You can't "+\$imperative+" "+\$(where:preposition)+" "+Describe(\$where) );
    return FALSE;
  \}
\}


\$stance = \$vob."stance:id";
\$ud     = \$vob."stance:ud"[\$actor."base:stance"];


\$briefit = FALSE;

if( \$where )
\{
  \$target = \$where[0];
  \$prep = PREPS[\$(where:preposition)];
  if( PREPS[\$(where:preposition)] == nil )
  \{
    chat::log(\$log: "Stance preposition \\"" + \$(where:preposition) + "\\" does not exist in the PREPS mapping. Verb: "+\$verb+"; Description: '" + \$(where:description) + "'; Actor: " + Describe(\$actor));
  \}

  if( !\$adverb \&\&
      !\$evoke \&\&
      NRefsEqual( \$actor."base:proximity", \$target ) \&\&
      \$actor."base:preposition" == \$prep \&\&
      \$actor."base:stance" == \$stance )
  \{
    EmitTo( \$actor, "Alas, you are already doing that." );
    return FALSE;
  \}
  \$apreps = \$target."detail:prepositions";

  /*
   * If the target is the prime detail, it will
   * automagically have a few prepositions.
   */
  sz      = IsPrime(\$target) ? sizeof(vols) : 0;
  for (i = 0; i \< sz; i++)
    \$apreps += (\$apreps \& vols[i]) == vols[i]
                   ?
                   0
                   :
                 vols[i];
 
  if(\$prep \&\& !((\$prep \& \$apreps) == \$prep ))
  \{
    EmitTo( \$actor, "You can't "+\$imperative+" '"+\$(where:preposition)+"' "+Describe(\$target)+"." );
    return FALSE;
  \}
\}
 else
\{

  if( !\$adverb \&\&
      !\$evoke \&\&
      \$actor."base:stance" == \$stance )
  \{
    EmitTo( \$actor, "Alas, you are already doing that." );
    return FALSE;
  \}

  \$briefit = ( \$actor."base:stance" == \$stance );

  if( Get( \$vob, "stance:default:" + \$actor."base:prepositionstring" ))
    \$prep = Get( \$vob, "stance:default:" + \$actor."base:prepositionstring" );
  else
    \$prep = \$actor."base:preposition";

\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:global:action">
         X[M] /*
  D=Stance Ur action.
*/

if( (!\$where \&\& (sizeof( \$roles )) \|\| sizeof( \$roles ) \> 1 \|\| ( !sizeof( \$roles ) \&\& \$vob."stance:evoke_social" \&\& \$evoke) )) \{
  \$actor.desc = TRUE;
  return TRUE;
\}

\$stance_old = \$actor."base:stance";

/*
 * 2006-03-06, Zwoc: Disabled in favor of internal consent and social settings (close).
 if( \$target ) \{
  if( !NRefsEqual( \$actor."base:proximity", \$target )) \{
    Act( \$actor, "approach", \$what: \$target );
    \$delay(2, TRUE, "b7db");
    if( !NRefsEqual( \$actor."base:proximity", \$target )) \{
      return TRUE;
    \}
  \}
\}
 *
 */ 

/* Move \$actor to NRef as consent only moves to prime. */
\$actor."base:proximity" = \$target;

\$d = \$stance_old - \$stance;

if(!\$prep) \$prep = "on";

\$actor."base:stance" = \$stance; 
\$actor."base:preposition" = \$prep;

/* if( \$d == 0 )
  \$ud = ""; 
else
  \$ud = \$d\>0 ? " down" : " up"; */

if( \$ud != "" )
  \$ud = " " + \$ud;

if( \$evoke ) 
\{
  if( \$(verb-extra:pe))
  \{
    \$dot = " and say " + \$(verb-extra:pe) + ", " + \$evoke;
    \$dat = " and says " + \$(verb-extra:pe) + ", " + (\$(evoke-witness)?\$(evoke-witness):\$evoke);
  \}
  else
  \{
    \$dot = ", " + \$evoke;
    \$dat = ", " + \$evoke;
  \}

\}
else
\{
  \$dot = ".";
  \$dat = ".";
\}

/*
 * Prepare to describe the action.
 */
\$pv = \$pp = \$pe = "";
if( \$adverb )
  args[\$(adverb:position)] = " " + \$adverb;

if( !\$briefit \&\& (\$o = \$actor."base:proximity" )) \{
  \$add = " " + \$actor."base:prepositionstring" + " " + Describe(\$o);
  if (catch(EmitTo( NRefOb(\$actor."base:proximity"), Describe(\$actor)+\$pv+" "+\$vob."stance:third"+\$ud+\$pp+" "+\$actor."base:prepositionstring" + " "+Describe(\$o, nil, NRefOb(\$actor."base:proximity")) + \$pe + \$dat ))) \{
    catch(error("so what's causing this? " + dump_value(args)));
  \}
\} else
  \$add = "";

EmitTo( \$actor, "You"+\$pv+" "+\$imperative+\$ud+\$pp+\$add+\$pe+\$dot );
EmitIn( \$actor."base:environment", Describe(\$actor)+\$pv+" "+\$vob."stance:third"+\$ud+\$pp+\$add+\$pe+\$dat, \$actor, \$o?NRefOb(\$o):nil );

return TRUE;

/*
 * ChangeLog [
 *    Change(Nov 11, 2004; Zwoc)="Kalle sits on you." -\> "Kalle sits on your foot." for non-prime proximity stances.
 *    Change(Mar  6, 2006; Zwoc)=Removed explicit prox check and approach in favor of game version, to kill bug.
 *    Change(Mar 22, 2006; Zwoc)=Added move-to-nref since consent seems to move to prime only.
 * ]
 */
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052081, "-", "SYNC", 1221752477, "???", "R", 1247223726, "tonyd", "P", 1247223742, "tonyd", "P", 1247223756, "tonyd", "P", 1247223777, "tonyd", "P", 1247223851, "tonyd", "E", 1597105468, "jominey", "E", 1597105548, "jominey", "E", 1597105606, "jominey", "E", 1597105654, "jominey", "E", 1597105682, "jominey", "E", 1597105751, "jominey", "E", 1597106063, "jominey", "P", 1597106109, "jominey", "P", 1597106205, "jominey", "P", 1597106246, "jominey", "P", 1597106274, "jominey", "P" \})
      </Core:Property>
      <Core:Property property="sys:sync:clearing">0</Core:Property>
      <Core:Property property="sys:sync:idpsource">
         "ironclaw"
      </Core:Property>
      <Core:Property property="sys:sync:igdipro">
         "ignore"
      </Core:Property>
    </Core:PCProperties>
  </SkotOS:MerAcHa>
</object>
